<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Single Model Repositories - The ORM Cookbook</title>
    <link rel="shortcut icon" href="favicon.ico">
    <link rel="stylesheet" href="css/theme.css" type="text/css" />
    <link rel="stylesheet" href="css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="css/styles/vs.css">
    <link rel="stylesheet" href="css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="index.htm"><i class="fa fa-home"></i> The ORM Cookbook</a>
                <div role="search">
                    <form id="search-form" class="form" action="Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="index.htm">Home</a>
</li>

<li class="tocentry"><a href="Introduction.htm">Introduction</a>
</li>
<li class="tocentry current"><a class="current" href="SingleModelRepositories.htm">Single Model Repositories</a>
<ul class="currentrelativeroot">
<li class="tocentry"><a href="#prototype-repository">Prototype Repository</a></li>
<li class="tocentry"><a href="#ado.net">ADO.NET</a></li>
<li class="tocentry"><a href="#dapper">Dapper</a></li>
<li class="tocentry"><a href="#tortuga-chain">Tortuga Chain</a></li>
<li class="tocentry"><a href="#entity-framework">Entity Framework</a></li>
</ul>
<li class="tocentry"><a href="AsynchronousRepositories.htm">Asynchronous Repositories</a>
</li>
<li class="tocentry"><a href="ModelWithSingleChild.htm">Model with Single Child</a>
</li>
</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="index.htm">The ORM Cookbook</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="index.htm">Home</a></li> / <li><a href="SingleModelRepositories.htm">Single Model Repositories</a></li></ul>
					
                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="use-case-single-model-repositories">Use Case: Single Model Repositories<a class="headerlink" href="#use-case-single-model-repositories" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p>This use case demonstrates CRUD operations on a single model mapped to a class. </p>
<h2 id="prototype-repository">Prototype Repository<a class="headerlink" href="#prototype-repository" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>This is the interface that every example repository will implement. </p>
<pre><code class="cs">public interface IEmployeeClassificationRepository
{
    EmployeeClassification GetByKey(int employeeClassificationKey);

    EmployeeClassification FindByName(string employeeClassificationName);

    IList&lt;EmployeeClassification&gt; GetAll();

    int Create(EmployeeClassification classification);
    void Update(EmployeeClassification classification);
    void Delete(EmployeeClassification classification);
    void Delete(int employeeClassificationKey);
}
</code></pre>

<p>The class <code>EmployeeClassification</code> is defined as such:</p>
<pre><code class="cs">public interface IEmployeeClassification
{
    int EmployeeClassificationKey { get; set; }
    string EmployeeClassificationName { get; set; }
}
</code></pre>

<h2 id="ado.net">ADO.NET<a class="headerlink" href="#ado.net" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>With ADO.NET, the model does not actually participate in database operations so it needs no adornment.</p>
<pre><code class="cs">public class EmployeeClassification : Recipes.Models.IEmployeeClassification
{
    public int EmployeeClassificationKey { get; set; }

    public string EmployeeClassificationName { get; set; }
}
</code></pre>

<p>The repository methods use raw SQL strings. All other ORMs internally generate the same code. </p>
<pre><code class="cs">public class EmployeeClassificationRepository : IEmployeeClassificationRepository&lt;EmployeeClassification&gt;
{

    readonly string m_ConnectionString;
    public EmployeeClassificationRepository(string connectionString)
    {
        m_ConnectionString = connectionString;
    }

    public int Create(EmployeeClassification classification)
    {
        var sql = @&quot;INSERT INTO HR.EmployeeClassification (EmployeeClassificationName) 
                    OUTPUT Inserted.EmployeeClassificationKey 
                    VALUES(@EmployeeClassificationName )&quot;;

        using (var con = new SqlConnection(m_ConnectionString))
        {
            con.Open();
            using (var cmd = new SqlCommand(sql, con))
            {
                cmd.Parameters.AddWithValue(&quot;@EmployeeClassificationName&quot;, classification.EmployeeClassificationName);
                return (int)cmd.ExecuteScalar();
            }
        }
    }

    public void Delete(int employeeClassificationKey)
    {
        var sql = @&quot;DELETE HR.EmployeeClassification WHERE EmployeeClassificationKey = @EmployeeClassificationKey;&quot;;

        using (var con = new SqlConnection(m_ConnectionString))
        {
            con.Open();

            using (var cmd = new SqlCommand(sql, con))
            {
                cmd.Parameters.AddWithValue(&quot;@EmployeeClassificationKey&quot;, employeeClassificationKey);
                cmd.ExecuteNonQuery();
            }
        }
    }

    public void Delete(EmployeeClassification classification)
    {
        var sql = @&quot;DELETE HR.EmployeeClassification WHERE EmployeeClassificationKey = @EmployeeClassificationKey;&quot;;

        using (var con = new SqlConnection(m_ConnectionString))
        {
            con.Open();

            using (var cmd = new SqlCommand(sql, con))
            {
                cmd.Parameters.AddWithValue(&quot;@EmployeeClassificationKey&quot;, classification.EmployeeClassificationKey);
                cmd.ExecuteNonQuery();
            }
        }
    }

    public EmployeeClassification FindByName(string employeeClassificationName)
    {
        var sql = @&quot;SELECT  ec.EmployeeClassificationKey, ec.EmployeeClassificationName 
                    FROM HR.EmployeeClassification ec
                    WHERE ec.EmployeeClassificationName = @EmployeeClassificationName;&quot;;

        using (var con = new SqlConnection(m_ConnectionString))
        {
            con.Open();

            using (var cmd = new SqlCommand(sql, con))
            {
                cmd.Parameters.AddWithValue(&quot;@EmployeeClassificationName&quot;, employeeClassificationName);
                using (var reader = cmd.ExecuteReader())
                {
                    if (!reader.Read())
                        return null;

                    return new EmployeeClassification()
                    {
                        EmployeeClassificationKey = reader.GetInt32(reader.GetOrdinal(&quot;EmployeeClassificationKey&quot;)),
                        EmployeeClassificationName = reader.GetString(reader.GetOrdinal(&quot;EmployeeClassificationName&quot;))
                    };
                }
            }
        }
    }

    public IList&lt;EmployeeClassification&gt; GetAll()
    {
        var sql = @&quot;SELECT  ec.EmployeeClassificationKey, ec.EmployeeClassificationName FROM HR.EmployeeClassification ec;&quot;;

        var result = new List&lt;EmployeeClassification&gt;();

        using (var con = new SqlConnection(m_ConnectionString))
        {
            con.Open();

            using (var cmd = new SqlCommand(sql, con))
            {
                using (var reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        result.Add(new EmployeeClassification()
                        {
                            EmployeeClassificationKey = reader.GetInt32(reader.GetOrdinal(&quot;EmployeeClassificationKey&quot;)),
                            EmployeeClassificationName = reader.GetString(reader.GetOrdinal(&quot;EmployeeClassificationName&quot;))
                        });
                    }
                    return result;
                }
            }
        }
    }

    public EmployeeClassification GetByKey(int employeeClassificationKey)
    {
        var sql = @&quot;SELECT ec.EmployeeClassificationKey, ec.EmployeeClassificationName
                    FROM HR.EmployeeClassification ec
                    WHERE ec.EmployeeClassificationKey = @EmployeeClassificationKey;&quot;;

        using (var con = new SqlConnection(m_ConnectionString))
        {
            con.Open();

            using (var cmd = new SqlCommand(sql, con))
            {
                cmd.Parameters.AddWithValue(&quot;@EmployeeClassificationKey&quot;, employeeClassificationKey);
                using (var reader = cmd.ExecuteReader())
                {
                    if (!reader.Read())
                        return null;

                    return new EmployeeClassification()
                    {
                        EmployeeClassificationKey = reader.GetInt32(reader.GetOrdinal(&quot;EmployeeClassificationKey&quot;)),
                        EmployeeClassificationName = reader.GetString(reader.GetOrdinal(&quot;EmployeeClassificationName&quot;))
                    };
                }
            }
        }
    }
    public void Update(EmployeeClassification classification)
    {
        var sql = @&quot;UPDATE HR.EmployeeClassification 
                    SET EmployeeClassificationName = @EmployeeClassificationName 
                    WHERE EmployeeClassificationKey = @EmployeeClassificationKey;&quot;;

        using (var con = new SqlConnection(m_ConnectionString))
        {
            con.Open();
            using (var cmd = new SqlCommand(sql, con))
            {
                cmd.Parameters.AddWithValue(&quot;@EmployeeClassificationKey&quot;, classification.EmployeeClassificationKey);
                cmd.Parameters.AddWithValue(&quot;@EmployeeClassificationName&quot;, classification.EmployeeClassificationName);
                cmd.ExecuteNonQuery();
            }
        }
    }
}
</code></pre>

<h2 id="dapper">Dapper<a class="headerlink" href="#dapper" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Dapper is essentially just ADO.NET with some helper methods to reduce the amount of boilerplate code.</p>
<pre><code class="cs">public class EmployeeClassificationRepository : IEmployeeClassificationRepository&lt;EmployeeClassification&gt;
{

    readonly string m_ConnectionString;
    public EmployeeClassificationRepository(string connectionString)
    {
        m_ConnectionString = connectionString;
    }

    public int Create(EmployeeClassification classification)
    {
        var sql = @&quot;INSERT INTO HR.EmployeeClassification (EmployeeClassificationName) 
                    OUTPUT Inserted.EmployeeClassificationKey 
                    VALUES (@EmployeeClassificationName )&quot;;
        using (var con = new SqlConnection(m_ConnectionString))
        {
            con.Open();
            return con.ExecuteScalar&lt;int&gt;(sql, classification);
        }
    }

    public EmployeeClassification FindByName(string employeeClassificationName)
    {
        var sql = @&quot;SELECT  ec.EmployeeClassificationKey, ec.EmployeeClassificationName 
                    FROM HR.EmployeeClassification ec
                    WHERE ec.EmployeeClassificationName = @EmployeeClassificationName;&quot;;

        using (var con = new SqlConnection(m_ConnectionString))
        {
            con.Open();

            return con.QuerySingle&lt;EmployeeClassification&gt;(sql, new { EmployeeClassificationName = employeeClassificationName });
        }
    }

    public void Delete(int employeeClassificationKey)
    {
        var sql = @&quot;DELETE HR.EmployeeClassification WHERE EmployeeClassificationKey = @EmployeeClassificationKey;&quot;;

        using (var con = new SqlConnection(m_ConnectionString))
        {
            con.Open();
            con.Execute(sql, new { EmployeeClassificationKey = employeeClassificationKey });
        }
    }

    public void Delete(EmployeeClassification classification)
    {
        var sql = @&quot;DELETE HR.EmployeeClassification WHERE EmployeeClassificationKey = @EmployeeClassificationKey;&quot;;

        using (var con = new SqlConnection(m_ConnectionString))
        {
            con.Open();
            con.Execute(sql, classification);
        }
    }

    public IList&lt;EmployeeClassification&gt; GetAll()
    {
        var sql = @&quot;SELECT  ec.EmployeeClassificationKey, ec.EmployeeClassificationName FROM HR.EmployeeClassification ec;&quot;;

        var result = new List&lt;EmployeeClassification&gt;();

        using (var con = new SqlConnection(m_ConnectionString))
        {
            con.Open();
            return con.Query&lt;EmployeeClassification&gt;(sql).ToList();
        }
    }

    public EmployeeClassification GetByKey(int employeeClassificationKey)
    {
        var sql = @&quot;SELECT ec.EmployeeClassificationKey, ec.EmployeeClassificationName
                    FROM HR.EmployeeClassification ec
                    WHERE ec.EmployeeClassificationKey = @EmployeeClassificationKey;&quot;;

        using (var con = new SqlConnection(m_ConnectionString))
        {
            con.Open();
            return con.QuerySingle&lt;EmployeeClassification&gt;(sql, new { EmployeeClassificationKey = employeeClassificationKey });
        }
    }

    public void Update(EmployeeClassification classification)
    {
        var sql = @&quot;UPDATE HR.EmployeeClassification 
                    SET EmployeeClassificationName = @EmployeeClassificationName 
                    WHERE EmployeeClassificationKey = @EmployeeClassificationKey;&quot;;

        using (var con = new SqlConnection(m_ConnectionString))
        {
            con.Open();
            con.Execute(sql, classification);
        }
    }
}
</code></pre>

<h2 id="tortuga-chain">Tortuga Chain<a class="headerlink" href="#tortuga-chain" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Strictly speaking, Chain can use the same models as ADO.NET and Dapper so long as the column and property names match. However, it is more convenient to tag the class with what table it refers to.</p>
<pre><code class="cs">[Table(&quot;HR.EmployeeClassification&quot;)]
public class EmployeeClassification : Recipes.Models.IEmployeeClassification
{
    public int EmployeeClassificationKey { get; set; }

    public string EmployeeClassificationName { get; set; }
}
</code></pre>

<pre><code class="cs">public class EmployeeClassificationRepository : IEmployeeClassificationRepository&lt;EmployeeClassification&gt;
{
    const string TableName = &quot;HR.EmployeeClassification&quot;;
    readonly SqlServerDataSource m_DataSource;
    public EmployeeClassificationRepository(SqlServerDataSource dataSource)
    {
        m_DataSource = dataSource;
    }

    public int Create(EmployeeClassification classification)
    {
        return m_DataSource.Insert(classification).ToInt32().Execute();
    }

    public void Delete(int employeeClassificationKey)
    {
        m_DataSource.DeleteByKey(TableName, employeeClassificationKey).Execute();
    }

    public void Delete(EmployeeClassification classification)
    {
        m_DataSource.Delete(classification).Execute();
    }

    public EmployeeClassification FindByName(string employeeClassificationName)
    {
        return m_DataSource.From(TableName, new { EmployeeClassificationName = employeeClassificationName }).ToObject&lt;EmployeeClassification&gt;().Execute();
    }

    public IList&lt;EmployeeClassification&gt; GetAll()
    {
        return m_DataSource.From(TableName).ToCollection&lt;EmployeeClassification&gt;().Execute();
    }

    public EmployeeClassification GetByKey(int employeeClassificationKey)
    {
        return m_DataSource.GetByKey(TableName, employeeClassificationKey).ToObject&lt;EmployeeClassification&gt;().Execute();
    }

    public void Update(EmployeeClassification classification)
    {
        m_DataSource.Update(classification).Execute();
    }
}
</code></pre>

<h2 id="entity-framework">Entity Framework<a class="headerlink" href="#entity-framework" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>To use Entity Framework, one needs to create a DbContext class. Here is a minimal example:</p>
<pre><code class="csharp">public partial class OrmCookbook : DbContext
{
    public OrmCookbook()
        : base(&quot;name=OrmCookbook&quot;)
    {
    }

    public virtual DbSet&lt;EmployeeClassification&gt; EmployeeClassifications { get; set; }

}
</code></pre>

<p>The model requires some annotations so that Entity Framework knows what table it applies to and what the primary key is.</p>
<pre><code class="csharp">[Table(&quot;HR.EmployeeClassification&quot;)]
public partial class EmployeeClassification
{
    [Key]
    public int EmployeeClassificationKey { get; set; }

    [StringLength(30)]
    public string EmployeeClassificationName { get; set; }
}
</code></pre>

<p>The context and model can be generated for you from the database using Entity Framework’s “Code First” tooling. (The name “code first” doesn’t literally mean the code has to be written before the database. Rather, it really means that you are not using EDMX style XML files.)</p>
<p>Finally, there is the repository itself:</p>
<pre><code class="cs">public class EmployeeClassificationRepository : IEmployeeClassificationRepository&lt;EmployeeClassification&gt;
{
    public virtual int Create(EmployeeClassification classification)
    {
        using (var context = new OrmCookbook())
        {
            context.EmployeeClassifications.Add(classification);
            context.SaveChanges();
            return classification.EmployeeClassificationKey;
        }
    }

    public virtual void Delete(int employeeClassificationKey)
    {
        using (var context = new OrmCookbook())
        {
            var temp = context.EmployeeClassifications.Find(employeeClassificationKey);
            if (temp != null)
            {
                context.EmployeeClassifications.Remove(temp);
                context.SaveChanges();
            }
        }
    }

    public virtual void Delete(EmployeeClassification classification)
    {
        using (var context = new OrmCookbook())
        {
            var temp = context.EmployeeClassifications.Find(classification.EmployeeClassificationKey);
            if (temp != null)
            {
                context.EmployeeClassifications.Remove(temp);
                context.SaveChanges();
            }
        }
    }

    public virtual EmployeeClassification FindByName(string employeeClassificationName)
    {
        using (var context = new OrmCookbook())
        {
            return context.EmployeeClassifications.Where(ec =&gt; ec.EmployeeClassificationName == employeeClassificationName).SingleOrDefault();
        }
    }

    public virtual IList&lt;EmployeeClassification&gt; GetAll()
    {
        using (var context = new OrmCookbook())
        {
            return context.EmployeeClassifications.ToList();
        }
    }

    public virtual EmployeeClassification GetByKey(int employeeClassificationKey)
    {
        using (var context = new OrmCookbook())
        {
            return context.EmployeeClassifications.Find(employeeClassificationKey);
        }
    }

    public virtual void Update(EmployeeClassification classification)
    {
        using (var context = new OrmCookbook())
        {
            var temp = context.EmployeeClassifications.Find(classification.EmployeeClassificationKey);
            temp.EmployeeClassificationName = classification.EmployeeClassificationName;
            context.SaveChanges();
        }
    }
}
</code></pre>

<div class="alert alert-info"><span class="alert-title"><i class="fa fa-info-circle"></i> Info</span><p>The repository methods are not normally virtual. This was done so that they could be overridden with better implementations as shown below.</p>
</div><h3 id="entity-framework-intermediate">Entity Framework Intermediate<a class="headerlink" href="#entity-framework-intermediate" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>The data access patterns in Entity Framework can be quite inefficient, so to reduce unnecessary database calls you can modify the code as shown below.</p>
<pre><code class="cs">public class EmployeeClassificationRepository_Intermediate : EmployeeClassificationRepository
{
    public override void Delete(int employeeClassificationKey)
    {
        using (var context = new OrmCookbook())
        {
            context.Database.ExecuteSqlCommand(&quot;DELETE FROM HR.EmployeeClassification WHERE EmployeeClassificationKey = @p0&quot;, employeeClassificationKey);
        }
    }

    public override void Delete(EmployeeClassification classification)
    {
        using (var context = new OrmCookbook())
        {
            context.Database.ExecuteSqlCommand(&quot;DELETE FROM HR.EmployeeClassification WHERE EmployeeClassificationKey = @p0&quot;, classification.EmployeeClassificationKey);
        }
    }

    public override void Update(EmployeeClassification classification)
    {
        using (var context = new OrmCookbook())
        {
            context.Entry(classification).State = EntityState.Modified;
            context.SaveChanges();
        }
    }
}
</code></pre>

<h3 id="nhibernate">NHibernate<a class="headerlink" href="#nhibernate" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h3>
<p>NHibernate is one of the oldest ORMs for the .NET Framework. Based on Java’s Hibernate, it heavily relies on XML configuration files and interfaces.</p>
<p>The models are interesting in that every property needs to be virtual. Without this, you’ll get a runtime error.</p>
<pre><code class="cs">public class EmployeeClassification : IEmployeeClassification
{
    public virtual int EmployeeClassificationKey { get; set; }

    public virtual string EmployeeClassificationName { get; set; }
}
</code></pre>

<p>Instead of attributes, a mapping file is used to associate the model with a database table.</p>
<pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
&lt;hibernate-mapping xmlns=&quot;urn:nhibernate-mapping-2.2&quot;
                   assembly=&quot;Recipes.NHibernate&quot;
                   namespace=&quot;Recipes.NHibernate.Models&quot;&gt;

  &lt;class name=&quot;EmployeeClassification&quot; table=&quot;EmployeeClassification&quot; schema=&quot;HR&quot;&gt;

    &lt;id name=&quot;EmployeeClassificationKey&quot; &gt;
      &lt;generator class=&quot;native&quot;/&gt;
    &lt;/id&gt;
    &lt;property name=&quot;EmployeeClassificationName&quot; /&gt;
  &lt;/class&gt;

&lt;/hibernate-mapping&gt;
</code></pre>

<p>The NHibernate documentation recommends create a session factory helper using this pattern:</p>
<pre><code class="cs">public class EmployeeClassificationRepository : IEmployeeClassificationRepository&lt;EmployeeClassification&gt;
{
    public int Create(EmployeeClassification classification)
    {
        using (ISession session = NHibernateHelper.OpenSession())
        {
            session.Save(classification);
            session.Flush();
            return classification.EmployeeClassificationKey;
        }
    }

    public void Delete(int employeeClassificationKey)
    {

        using (ISession session = NHibernateHelper.OpenSession())
        {
            var temp = session.Get&lt;EmployeeClassification&gt;(employeeClassificationKey);
            session.Delete(temp);
            session.Flush();
        }
    }

    public void Delete(EmployeeClassification classification)
    {
        using (ISession session = NHibernateHelper.OpenSession())
        {
            session.Delete(classification);
            session.Flush();
        }
    }

    public EmployeeClassification FindByName(string employeeClassificationName)
    {
        using (ISession session = NHibernateHelper.OpenSession())
        {
            return session
                .CreateCriteria(typeof(EmployeeClassification))
                .Add(Restrictions.Eq(&quot;EmployeeClassificationName&quot;, employeeClassificationName))
                .List&lt;EmployeeClassification&gt;()
                .SingleOrDefault();
        }
    }

    public IList&lt;EmployeeClassification&gt; GetAll()
    {
        using (ISession session = NHibernateHelper.OpenSession())
        {
            return session
                .CreateCriteria(typeof(EmployeeClassification))
                .List&lt;EmployeeClassification&gt;();
        }
    }

    public EmployeeClassification GetByKey(int employeeClassificationKey)
    {
        using (ISession session = NHibernateHelper.OpenSession())
            return session.Get&lt;EmployeeClassification&gt;(employeeClassificationKey);
    }

    public void Update(EmployeeClassification classification)
    {
        using (ISession session = NHibernateHelper.OpenSession())
        {
            session.Update(classification);
            session.Flush();
        }
    }
}
</code></pre>

<p>Finally there is the repository itself.</p>
<pre><code class="cs">public class EmployeeClassificationRepository : IEmployeeClassificationRepository&lt;EmployeeClassification&gt;
{
    public int Create(EmployeeClassification classification)
    {
        using (ISession session = NHibernateHelper.OpenSession())
        {
            session.Save(classification);
            session.Flush();
            return classification.EmployeeClassificationKey;
        }
    }

    public void Delete(int employeeClassificationKey)
    {

        using (ISession session = NHibernateHelper.OpenSession())
        {
            var temp = session.Get&lt;EmployeeClassification&gt;(employeeClassificationKey);
            session.Delete(temp);
            session.Flush();
        }
    }

    public void Delete(EmployeeClassification classification)
    {
        using (ISession session = NHibernateHelper.OpenSession())
        {
            session.Delete(classification);
            session.Flush();
        }
    }

    public EmployeeClassification FindByName(string employeeClassificationName)
    {
        using (ISession session = NHibernateHelper.OpenSession())
        {
            return session
                .CreateCriteria(typeof(EmployeeClassification))
                .Add(Restrictions.Eq(&quot;EmployeeClassificationName&quot;, employeeClassificationName))
                .List&lt;EmployeeClassification&gt;()
                .SingleOrDefault();
        }
    }

    public IList&lt;EmployeeClassification&gt; GetAll()
    {
        using (ISession session = NHibernateHelper.OpenSession())
        {
            return session
                .CreateCriteria(typeof(EmployeeClassification))
                .List&lt;EmployeeClassification&gt;();
        }
    }

    public EmployeeClassification GetByKey(int employeeClassificationKey)
    {
        using (ISession session = NHibernateHelper.OpenSession())
            return session.Get&lt;EmployeeClassification&gt;(employeeClassificationKey);
    }

    public void Update(EmployeeClassification classification)
    {
        using (ISession session = NHibernateHelper.OpenSession())
        {
            session.Update(classification);
            session.Flush();
        }
    }
}
</code></pre>

<p>The rules on when you need to call <code>Flush</code> are complex. In some cases it will be called for you implicitly, but as a general rule you need to invoke it before leaving a block that includes modifications.</p>

                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">
The ORM Cookbook. <a href='https://github.com/Grauenwolf/DotNet-ORM-Cookbook' target='_blank'>Visit us at GitHub</a>.
                    </div>
                </footer>
            </div>
        </section>
    </div>
    <script src="js/jquery-2.1.1.min.js"></script>
    <script src="js/modernizr-2.8.3.min.js"></script>
    <script src="js/highlight.pack.js"></script>
    <script src="js/theme.js"></script>

</body>
</html>
