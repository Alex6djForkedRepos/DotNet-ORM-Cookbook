<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Sorting - The .NET Core ORM Cookbook</title>
    <link rel="shortcut icon" href="favicon.ico">
    <link rel="stylesheet" href="css/theme.css" type="text/css" />
    <link rel="stylesheet" href="css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="css/styles/vs.css">
    <link rel="stylesheet" href="css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="index.htm"><i class="fa fa-home"></i> The .NET Core ORM Cookbook</a>
                <div role="search">
                    <form id="search-form" class="form" action="Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="index.htm">Home</a>
</li>

<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="ORMs.htm">ORMs</a></span>
</li>
<li class="tocentry"><a href="FAQ.htm">FAQ</a>
</li>
<li class="tocentry"><a href="SingleModelCrud.htm">Single Model CRUD</a>
</li>
<li class="tocentry"><a href="ModelWithChildren.htm">Model with Children CRUD</a>
</li>
<li class="tocentry"><a href="SingleModelCrudAsync.htm">Async Operations</a>
</li>
<li class="tocentry"><a href="TryCrud.htm">TryGet/Update/Delete Operations</a>
</li>
<li class="tocentry"><a href="Upsert.htm">Upsert</a>
</li>
<li class="tocentry"><a href="PartialUpdate.htm">Partial Updates</a>
</li>
<li class="tocentry"><a href="Immutable.htm">Immutable CRUD</a>
</li>
<li class="tocentry"><a href="MultipleCrud.htm">CRUD Operations on Multiple Objects</a>
</li>
<li class="tocentry"><a href="LargeBatch.htm">Batch Inserts with Large Collections</a>
</li>
<li class="tocentry"><a href="BulkInsert.htm">Bulk Inserts</a>
</li>
<li class="tocentry"><a href="Joins.htm">Projecting with a Join</a>
</li>
<li class="tocentry"><a href="Views.htm">Reading from Views</a>
</li>
<li class="tocentry"><a href="ScalarValue.htm">Reading a Salar Value from a Row</a>
</li>
<li class="tocentry"><a href="SingleColumn.htm">Reading a Single Column from a Table</a>
</li>
<li class="tocentry"><a href="RowCount.htm">Row Counts</a>
</li>
<li class="tocentry">
<ul class="current">
<li><span class="navigationgroup"><i class="fa fa-caret-down"></i> <a href="Sorting.htm">Sorting</a></span></li>
<li class="tocentry"><a href="Sorting.htm">Basic Sorting</a>
</li>

</ul>
</li>
<li class="tocentry"><a href="Pagination.htm">Paging Results</a>
</li>
<li class="tocentry"><a href="PopulateDataTable.htm">Populate DataTable</a>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="ForeignKeytoLookupTableCRUD.htm">Foreign Key to Lookup Table CRUD</a></span>
</li>
<li class="tocentry"><a href="BasicStoredProc.htm">Basic Stored Procedures</a>
</li>
<li class="tocentry"><a href="Transactions.htm">Working with Transactions</a>
</li>
</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="index.htm">The .NET Core ORM Cookbook</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="index.htm">Home</a></li> / <li><a href="Sorting.htm">Sorting</a></li></ul>
					
                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="basic-sorting">Basic Sorting<a class="headerlink" href="#basic-sorting" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p>These scenarios demonstrate how to perform basic sorts. </p>
<p>Note: <a href="DynamicSorting">Sorting by dynamically chosen columns</a> or by expressions will be handled in a separate scenarios.</p>
<h2 id="scenario-prototype">Scenario Prototype<a class="headerlink" href="#scenario-prototype" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<pre><code class="cs">public interface ISortingScenario&lt;TEmployeeSimple&gt;
   where TEmployeeSimple : class, IEmployeeSimple, new()
{
    /// &lt;summary&gt;
    /// Insert a collection of Employee rows.
    /// &lt;/summary&gt;
    void InsertBatch(IList&lt;TEmployeeSimple&gt; employees);

    /// &lt;summary&gt;
    /// Sorts by the first name
    /// &lt;/summary&gt;
    IList&lt;TEmployeeSimple&gt; SortByFirstName(string lastName);

    /// &lt;summary&gt;
    /// Sorts by the middle name in reverse order, then the first name.
    /// &lt;/summary&gt;
    IList&lt;TEmployeeSimple&gt; SortByMiddleNameDescFirstName(string lastName);

    /// &lt;summary&gt;
    /// Sorts by the middle name, then the first name.
    /// &lt;/summary&gt;
    IList&lt;TEmployeeSimple&gt; SortByMiddleNameFirstName(string lastName);
}
</code></pre>

<h2 id="ado.net">ADO.NET<a class="headerlink" href="#ado.net" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<pre><code class="cs">    public class SortingScenario : ScenarioBase, ISortingScenario&lt;EmployeeSimple&gt;
    {
        public SortingScenario(string connectionString) : base(connectionString)
        { }

        public void InsertBatch(IList&lt;EmployeeSimple&gt; employees)
        {
            if (employees == null || employees.Count == 0)
                throw new ArgumentException($&quot;{nameof(employees)} is null or empty.&quot;, nameof(employees));

            var sql = new StringBuilder(@&quot;INSERT INTO HR.Employee
(FirstName, MiddleName, LastName, Title, OfficePhone, CellPhone, EmployeeClassificationKey)
VALUES &quot;);

            for (var i = 0; i &lt; employees.Count; i++)
            {
                if (i != 0)
                    sql.AppendLine(&quot;,&quot;);
                sql.Append($&quot;(@FirstName_{i}, @MiddleName_{i}, @LastName_{i}, @Title_{i}, @OfficePhone_{i}, @CellPhone_{i}, @EmployeeClassificationKey_{i})&quot;);
            }
            sql.AppendLine(&quot;;&quot;);

            //No transaction is needed because a single SQL statement is used.
            using (var con = OpenConnection())
            using (var cmd = new SqlCommand(sql.ToString(), con))
            {
                for (var i = 0; i &lt; employees.Count; i++)
                {
                    cmd.Parameters.AddWithValue($&quot;@FirstName_{i}&quot;, employees[i].FirstName);
                    cmd.Parameters.AddWithValue($&quot;@MiddleName_{i}&quot;, (object?)employees[i].MiddleName ?? DBNull.Value);
                    cmd.Parameters.AddWithValue($&quot;@LastName_{i}&quot;, employees[i].LastName);
                    cmd.Parameters.AddWithValue($&quot;@Title_{i}&quot;, (object?)employees[i].Title ?? DBNull.Value);
                    cmd.Parameters.AddWithValue($&quot;@OfficePhone_{i}&quot;, (object?)employees[i].OfficePhone ?? DBNull.Value);
                    cmd.Parameters.AddWithValue($&quot;@CellPhone_{i}&quot;, (object?)employees[i].CellPhone ?? DBNull.Value);
                    cmd.Parameters.AddWithValue($&quot;@EmployeeClassificationKey_{i}&quot;, employees[i].EmployeeClassificationKey);
                }
                cmd.ExecuteNonQuery();
            }
        }

        public IList&lt;EmployeeSimple&gt; SortByFirstName(string lastName)
        {
            const string sql = &quot;SELECT e.EmployeeKey, e.FirstName, e.MiddleName, e.LastName, e.Title, e.OfficePhone, e.CellPhone, e.EmployeeClassificationKey FROM HR.Employee e WHERE e.LastName = @LastName ORDER BY e.FirstName&quot;;

            using (var con = OpenConnection())
            using (var cmd = new SqlCommand(sql, con))
            {
                cmd.Parameters.AddWithValue(&quot;@LastName&quot;, lastName);

                var results = new List&lt;EmployeeSimple&gt;();

                using (var reader = cmd.ExecuteReader())
                    while (reader.Read())
                        results.Add(new EmployeeSimple(reader));

                return results;
            }
        }

        public IList&lt;EmployeeSimple&gt; SortByMiddleNameDescFirstName(string lastName)
        {
            const string sql = &quot;SELECT e.EmployeeKey, e.FirstName, e.MiddleName, e.LastName, e.Title, e.OfficePhone, e.CellPhone, e.EmployeeClassificationKey FROM HR.Employee e WHERE e.LastName = @LastName ORDER BY e.MiddleName DESC, e.FirstName&quot;;

            using (var con = OpenConnection())
            using (var cmd = new SqlCommand(sql, con))
            {
                cmd.Parameters.AddWithValue(&quot;@LastName&quot;, lastName);

                var results = new List&lt;EmployeeSimple&gt;();

                using (var reader = cmd.ExecuteReader())
                    while (reader.Read())
                        results.Add(new EmployeeSimple(reader));

                return results;
            }
        }

        public IList&lt;EmployeeSimple&gt; SortByMiddleNameFirstName(string lastName)
        {
            const string sql = &quot;SELECT e.EmployeeKey, e.FirstName, e.MiddleName, e.LastName, e.Title, e.OfficePhone, e.CellPhone, e.EmployeeClassificationKey FROM HR.Employee e WHERE e.LastName = @LastName ORDER BY e.MiddleName, e.FirstName&quot;;

            using (var con = OpenConnection())
            using (var cmd = new SqlCommand(sql, con))
            {
                cmd.Parameters.AddWithValue(&quot;@LastName&quot;, lastName);

                var results = new List&lt;EmployeeSimple&gt;();

                using (var reader = cmd.ExecuteReader())
                    while (reader.Read())
                        results.Add(new EmployeeSimple(reader));

                return results;
            }
        }
    }
</code></pre>

<h2 id="chain">Chain<a class="headerlink" href="#chain" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Columns to be sorted by are passed in as strings, but checked against the list of columns at runtime to prevent SQL injection attacks. A <code>SortExpression</code> object is needed for reverse sorting.</p>
<pre><code class="cs">public class SortingScenario : ISortingScenario&lt;EmployeeSimple&gt;
{
    const string EmployeeTableName = &quot;HR.Employee&quot;;
    readonly SqlServerDataSource m_DataSource;

    public SortingScenario(SqlServerDataSource dataSource)
    {
        m_DataSource = dataSource;
    }

    public void InsertBatch(IList&lt;EmployeeSimple&gt; employees)
    {
        m_DataSource.InsertBatch((IReadOnlyList&lt;EmployeeSimple&gt;)employees).Execute();
    }

    public IList&lt;EmployeeSimple&gt; SortByFirstName(string lastName)
    {
        return m_DataSource.From(EmployeeTableName, new { lastName }).WithSorting(&quot;FirstName&quot;).ToCollection&lt;EmployeeSimple&gt;().Execute();
    }

    public IList&lt;EmployeeSimple&gt; SortByMiddleNameDescFirstName(string lastName)
    {
        return m_DataSource.From(EmployeeTableName, new { lastName }).WithSorting(new SortExpression(&quot;MiddleName&quot;, SortDirection.Descending), &quot;FirstName&quot;).ToCollection&lt;EmployeeSimple&gt;().Execute();
    }

    public IList&lt;EmployeeSimple&gt; SortByMiddleNameFirstName(string lastName)
    {
        return m_DataSource.From(EmployeeTableName, new { lastName }).WithSorting(&quot;MiddleName&quot;, &quot;FirstName&quot;).ToCollection&lt;EmployeeSimple&gt;().Execute();
    }
}
</code></pre>

<h2 id="dapper">Dapper<a class="headerlink" href="#dapper" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<pre><code class="cs">    public class SortingScenario : ScenarioBase, ISortingScenario&lt;EmployeeSimple&gt;
    {
        public SortingScenario(string connectionString) : base(connectionString)
        {
        }

        public void InsertBatch(IList&lt;EmployeeSimple&gt; employees)
        {
            if (employees == null || employees.Count == 0)
                throw new ArgumentException($&quot;{nameof(employees)} is null or empty.&quot;, nameof(employees));

            var sql = new StringBuilder(@&quot;INSERT INTO HR.Employee
(FirstName, MiddleName, LastName, Title, OfficePhone, CellPhone, EmployeeClassificationKey)
VALUES &quot;);
            var parameters = new Dictionary&lt;string, object?&gt;();
            for (var i = 0; i &lt; employees.Count; i++)
            {
                if (i != 0)
                    sql.AppendLine(&quot;,&quot;);
                sql.Append($&quot;(@FirstName_{i}, @MiddleName_{i}, @LastName_{i}, @Title_{i}, @OfficePhone_{i}, @CellPhone_{i}, @EmployeeClassificationKey_{i})&quot;);

                parameters[$&quot;@FirstName_{i}&quot;] = employees[i].FirstName;
                parameters[$&quot;@MiddleName_{i}&quot;] = employees[i].MiddleName;
                parameters[$&quot;@LastName_{i}&quot;] = employees[i].LastName;
                parameters[$&quot;@Title_{i}&quot;] = employees[i].Title;
                parameters[$&quot;@OfficePhone_{i}&quot;] = employees[i].OfficePhone;
                parameters[$&quot;@CellPhone_{i}&quot;] = employees[i].CellPhone;
                parameters[$&quot;@EmployeeClassificationKey_{i}&quot;] = employees[i].EmployeeClassificationKey;
            }
            sql.AppendLine(&quot;;&quot;);

            //No transaction is needed because a single SQL statement is used.
            using (var con = OpenConnection())
                con.Execute(sql.ToString(), parameters);
        }

        public IList&lt;EmployeeSimple&gt; SortByFirstName(string lastName)
        {
            const string sql = &quot;SELECT e.EmployeeKey, e.FirstName, e.MiddleName, e.LastName, e.Title, e.OfficePhone, e.CellPhone, e.EmployeeClassificationKey FROM HR.Employee e WHERE e.LastName = @LastName ORDER BY e.FirstName&quot;;

            using (var con = OpenConnection())
                return con.Query&lt;EmployeeSimple&gt;(sql, new { lastName }).ToList();
        }

        public IList&lt;EmployeeSimple&gt; SortByMiddleNameDescFirstName(string lastName)
        {
            const string sql = &quot;SELECT e.EmployeeKey, e.FirstName, e.MiddleName, e.LastName, e.Title, e.OfficePhone, e.CellPhone, e.EmployeeClassificationKey FROM HR.Employee e WHERE e.LastName = @LastName ORDER BY e.MiddleName DESC, e.FirstName&quot;;

            using (var con = OpenConnection())
                return con.Query&lt;EmployeeSimple&gt;(sql, new { lastName }).ToList();
        }

        public IList&lt;EmployeeSimple&gt; SortByMiddleNameFirstName(string lastName)
        {
            const string sql = &quot;SELECT e.EmployeeKey, e.FirstName, e.MiddleName, e.LastName, e.Title, e.OfficePhone, e.CellPhone, e.EmployeeClassificationKey FROM HR.Employee e WHERE e.LastName = @LastName ORDER BY e.MiddleName, e.FirstName&quot;;

            using (var con = OpenConnection())
                return con.Query&lt;EmployeeSimple&gt;(sql, new { lastName }).ToList();
        }
    }
</code></pre>

<h2 id="entity-framework-6">Entity Framework 6<a class="headerlink" href="#entity-framework-6" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<pre><code class="cs">public class SortingScenario : ISortingScenario&lt;Employee&gt;
{
    private Func&lt;OrmCookbookContext&gt; CreateDbContext;

    public SortingScenario(Func&lt;OrmCookbookContext&gt; dBContextFactory)
    {
        CreateDbContext = dBContextFactory;
    }

    public void InsertBatch(IList&lt;Employee&gt; employees)
    {
        if (employees == null || employees.Count == 0)
            throw new ArgumentException($&quot;{nameof(employees)} is null or empty.&quot;, nameof(employees));

        using (var context = CreateDbContext())
        {
            foreach (var employee in employees)
                context.Employee.Add(employee);
            context.SaveChanges();
        }
    }

    public IList&lt;Employee&gt; SortByFirstName(string lastName)
    {
        using (var context = CreateDbContext())
            return context.Employee.Where(x =&gt; x.LastName == lastName).OrderBy(x =&gt; x.FirstName).ToList();
    }

    public IList&lt;Employee&gt; SortByMiddleNameDescFirstName(string lastName)
    {
        using (var context = CreateDbContext())
            return context.Employee.Where(x =&gt; x.LastName == lastName).OrderByDescending(x =&gt; x.MiddleName).ThenBy(x =&gt; x.FirstName).ToList();
    }

    public IList&lt;Employee&gt; SortByMiddleNameFirstName(string lastName)
    {
        using (var context = CreateDbContext())
            return context.Employee.Where(x =&gt; x.LastName == lastName).OrderBy(x =&gt; x.MiddleName).ThenBy(x =&gt; x.FirstName).ToList();
    }
}
</code></pre>

<h2 id="entity-framework-core">Entity Framework Core<a class="headerlink" href="#entity-framework-core" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<pre><code class="cs">public class SortingScenario : ISortingScenario&lt;Employee&gt;
{
    private Func&lt;OrmCookbookContext&gt; CreateDbContext;

    public SortingScenario(Func&lt;OrmCookbookContext&gt; dBContextFactory)
    {
        CreateDbContext = dBContextFactory;
    }

    public void InsertBatch(IList&lt;Employee&gt; employees)
    {
        if (employees == null || employees.Count == 0)
            throw new ArgumentException($&quot;{nameof(employees)} is null or empty.&quot;, nameof(employees));

        using (var context = CreateDbContext())
        {
            foreach (var employee in employees)
                context.Employee.Add(employee);
            context.SaveChanges();
        }
    }

    public IList&lt;Employee&gt; SortByFirstName(string lastName)
    {
        using (var context = CreateDbContext())
            return context.Employee.Where(x =&gt; x.LastName == lastName).OrderBy(x =&gt; x.FirstName).ToList();
    }

    public IList&lt;Employee&gt; SortByMiddleNameDescFirstName(string lastName)
    {
        using (var context = CreateDbContext())
            return context.Employee.Where(x =&gt; x.LastName == lastName).OrderByDescending(x =&gt; x.MiddleName).ThenBy(x =&gt; x.FirstName).ToList();
    }

    public IList&lt;Employee&gt; SortByMiddleNameFirstName(string lastName)
    {
        using (var context = CreateDbContext())
            return context.Employee.Where(x =&gt; x.LastName == lastName).OrderBy(x =&gt; x.MiddleName).ThenBy(x =&gt; x.FirstName).ToList();
    }
}
</code></pre>

<h2 id="linq-to-db">LINQ to DB<a class="headerlink" href="#linq-to-db" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<pre><code class="cs">public class SortingScenario : ISortingScenario&lt;Employee&gt;
{
    public void InsertBatch(IList&lt;Employee&gt; employees)
    {
        var options = new BulkCopyOptions() { BulkCopyType = BulkCopyType.MultipleRows };
        using (var db = new OrmCookbook())
            db.BulkCopy(options, employees);
    }

    public IList&lt;Employee&gt; SortByFirstName(string lastName)
    {
        using (var db = new OrmCookbook())
            return db.Employee.Where(x =&gt; x.LastName == lastName).OrderBy(x =&gt; x.FirstName).ToList();
    }

    public IList&lt;Employee&gt; SortByMiddleNameDescFirstName(string lastName)
    {
        using (var db = new OrmCookbook())
            return db.Employee.Where(x =&gt; x.LastName == lastName).OrderByDescending(x =&gt; x.MiddleName).ThenBy(x =&gt; x.FirstName).ToList();
    }

    public IList&lt;Employee&gt; SortByMiddleNameFirstName(string lastName)
    {
        using (var db = new OrmCookbook())
            return db.Employee.Where(x =&gt; x.LastName == lastName).OrderBy(x =&gt; x.MiddleName).ThenBy(x =&gt; x.FirstName).ToList();
    }
}
</code></pre>

<h2 id="llblgen-pro">LLBLGen Pro<a class="headerlink" href="#llblgen-pro" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<pre><code class="cs">public class SortingScenario : ISortingScenario&lt;EmployeeEntity&gt;
{
    public void InsertBatch(IList&lt;EmployeeEntity&gt; employees)
    {
        if (employees == null || employees.Count == 0)
            throw new ArgumentException($&quot;{nameof(employees)} is null or empty.&quot;, nameof(employees));

        using (var toInsert = new EntityCollection&lt;EmployeeEntity&gt;(employees))
        {
            using (var adapter = new DataAccessAdapter())
            {
                adapter.BatchSize = 100;
                adapter.SaveEntityCollection(toInsert);
            }
        }
    }

    public IList&lt;EmployeeEntity&gt; SortByFirstName(string lastName)
    {
        using (var adapter = new DataAccessAdapter())
        {
            return new LinqMetaData(adapter).Employee.Where(x =&gt; x.LastName == lastName).OrderBy(x =&gt; x.FirstName).ToList();
        }
    }

    public IList&lt;EmployeeEntity&gt; SortByMiddleNameDescFirstName(string lastName)

    {
        using (var adapter = new DataAccessAdapter())
        {
            return new LinqMetaData(adapter).Employee.Where(x =&gt; x.LastName == lastName).OrderByDescending(x =&gt; x.MiddleName).ThenBy(x =&gt; x.FirstName).ToList();
        }
    }

    public IList&lt;EmployeeEntity&gt; SortByMiddleNameFirstName(string lastName)
    {
        using (var adapter = new DataAccessAdapter())
        {
            return new LinqMetaData(adapter).Employee.Where(x =&gt; x.LastName == lastName).OrderBy(x =&gt; x.MiddleName).ThenBy(x =&gt; x.FirstName).ToList();
        }
    }
}
</code></pre>

<h2 id="nhibernate">NHibernate<a class="headerlink" href="#nhibernate" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<pre><code class="cs">public class SortingScenario : ISortingScenario&lt;Employee&gt;
{
    readonly ISessionFactory m_SessionFactory;

    public SortingScenario(ISessionFactory sessionFactory)
    {
        m_SessionFactory = sessionFactory;
    }

    public void InsertBatch(IList&lt;Employee&gt; employees)
    {
        if (employees == null || employees.Count == 0)
            throw new ArgumentException($&quot;{nameof(employees)} is null or empty.&quot;, nameof(employees));

        using (var session = m_SessionFactory.OpenSession())
        {
            foreach (var employee in employees)
                session.Save(employee);
            session.Flush();
        }
    }

    public IList&lt;Employee&gt; SortByFirstName(string lastName)
    {
        using (var session = m_SessionFactory.OpenStatelessSession())
        {
            return session
                .QueryOver&lt;Employee&gt;()
                .Where(x =&gt; x.LastName == lastName)
                .OrderBy(x =&gt; x.FirstName).Asc
                .List();
        }
    }

    public IList&lt;Employee&gt; SortByMiddleNameDescFirstName(string lastName)
    {
        using (var session = m_SessionFactory.OpenStatelessSession())
        {
            return session
                .QueryOver&lt;Employee&gt;()
                .Where(x =&gt; x.LastName == lastName)
                .OrderBy(x =&gt; x.MiddleName).Desc
                .ThenBy(x =&gt; x.FirstName).Asc
                .List();
        }
    }

    public IList&lt;Employee&gt; SortByMiddleNameFirstName(string lastName)
    {
        using (var session = m_SessionFactory.OpenStatelessSession())
        {
            return session
                .QueryOver&lt;Employee&gt;()
                .Where(x =&gt; x.LastName == lastName)
                .OrderBy(x =&gt; x.MiddleName).Asc
                .ThenBy(x =&gt; x.FirstName).Asc
                .List();
        }
    }
}
</code></pre>

<h2 id="repodb">RepoDb<a class="headerlink" href="#repodb" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<pre><code class="cs">public class SortingScenario : BaseRepository&lt;EmployeeSimple, SqlConnection&gt;,
    ISortingScenario&lt;EmployeeSimple&gt;
{
    public SortingScenario(string connectionString)
        : base(connectionString, RDB.Enumerations.ConnectionPersistency.Instance)
    { }

    public void InsertBatch(IList&lt;EmployeeSimple&gt; employees)
    {
        if (employees == null || employees.Count == 0)
            throw new ArgumentException($&quot;{nameof(employees)} is null or empty.&quot;, nameof(employees));

        InsertAll(employees);
    }

    public IList&lt;EmployeeSimple&gt; SortByFirstName(string lastName)
    {
        return Query(x =&gt; x.LastName == lastName).OrderBy(x =&gt; x.FirstName).AsList();
    }

    public IList&lt;EmployeeSimple&gt; SortByMiddleNameDescFirstName(string lastName)
    {
        return Query(x =&gt; x.LastName == lastName).OrderByDescending(x =&gt; x.MiddleName).ThenBy(x =&gt; x.FirstName).AsList();
    }

    public IList&lt;EmployeeSimple&gt; SortByMiddleNameFirstName(string lastName)
    {
        return Query(x =&gt; x.LastName == lastName).OrderBy(x =&gt; x.MiddleName).ThenBy(x =&gt; x.FirstName).AsList();
    }
}
</code></pre>

<h2 id="servicestack">ServiceStack<a class="headerlink" href="#servicestack" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<pre><code class="cs">public class SortingScenario : ISortingScenario&lt;Employee&gt;
{
    private readonly IDbConnectionFactory _dbConnectionFactory;

    public SortingScenario(IDbConnectionFactory dbConnectionFactory)
    {
        _dbConnectionFactory = dbConnectionFactory;
    }

    public void InsertBatch(IList&lt;Employee&gt; employees)
    {
        using (var db = _dbConnectionFactory.OpenDbConnection())
            db.InsertAll(employees);
    }

    public IList&lt;Employee&gt; SortByFirstName(string lastName)
    {
        using (var db = _dbConnectionFactory.OpenDbConnection())
        {
            return db.Select(db.From&lt;Employee&gt;().Where(x =&gt; x.LastName == lastName).OrderBy(x =&gt; new { x.FirstName })).ToList();
        }
    }

    public IList&lt;Employee&gt; SortByMiddleNameDescFirstName(string lastName)

    {
        using (var db = _dbConnectionFactory.OpenDbConnection())
        {
            return db.Select(db.From&lt;Employee&gt;().Where(x =&gt; x.LastName == lastName).OrderByDescending(x =&gt; new { x.MiddleName }).ThenBy(x =&gt; new { x.FirstName })).ToList();
        }
    }

    public IList&lt;Employee&gt; SortByMiddleNameFirstName(string lastName)

    {
        using (var db = _dbConnectionFactory.OpenDbConnection())
        {
            return db.Select(db.From&lt;Employee&gt;().Where(x =&gt; x.LastName == lastName).OrderBy(x =&gt; new { x.MiddleName, x.FirstName })).ToList();
        }
    }
}
</code></pre>


                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">
The ORM Cookbook. <a href='https://github.com/Grauenwolf/DotNet-ORM-Cookbook' target='_blank'>Visit us at GitHub</a>.
                    </div>
                </footer>
            </div>
        </section>
    </div>
    <script src="js/jquery-2.1.1.min.js"></script>
    <script src="js/modernizr-2.8.3.min.js"></script>
    <script src="js/highlight.pack.js"></script>
    <script src="js/theme.js"></script>

</body>
</html>
