<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Model with Childern CRUD - The .NET Core ORM Cookbook</title>
    <link rel="shortcut icon" href="favicon.ico">
    <link rel="stylesheet" href="css/theme.css" type="text/css" />
    <link rel="stylesheet" href="css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="css/styles/vs.css">
    <link rel="stylesheet" href="css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="index.htm"><i class="fa fa-home"></i> The .NET Core ORM Cookbook</a>
                <div role="search">
                    <form id="search-form" class="form" action="Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="index.htm">Home</a>
</li>

<li class="tocentry"><a href="FAQ.htm">FAQ</a>
</li>
<li class="tocentry"><a href="SingleModelCrud.htm">Single Model CRUD</a>
</li>
<li class="tocentry current"><a class="current" href="ModelWithChildren.htm">Model with Childern CRUD</a>
<ul class="currentrelative">
<li class="tocentry"><a href="#prototype-repository">Prototype Repository</a></li>

<li class="tocentry"><a href="#ado.net">ADO.NET</a></li>

<li class="tocentry"><a href="#chain">Chain</a></li>

<li class="tocentry"><a href="#dapper">Dapper</a></li>

<li class="tocentry"><a href="#entity-framework-core">Entity Framework Core</a></li>

<li class="tocentry"><a href="#llblgen-pro">LLBLGen Pro</a></li>

<li class="tocentry"><a href="#nhibernate">NHibernate</a></li>

<li class="tocentry"><a href="#repodb">RepoDb</a></li>

<li class="tocentry"><a href="#servicestack">ServiceStack</a></li>



</ul>
<li class="tocentry"><a href="SingleModelCrudAsync.htm">Async Operations</a>
</li>
<li class="tocentry"><a href="TryCrud.htm">TryGet/Update/Delete Operations</a>
</li>
<li class="tocentry"><a href="PartialUpdate.htm">Partial Updates</a>
</li>
<li class="tocentry"><a href="Immutable.htm">Immutable CRUD</a>
</li>
<li class="tocentry"><a href="PopulateDataTable.htm">Populate DataTable</a>
</li>
<li class="tocentry">
<span class="navigationgroup"><i class="fa fa-caret-right"></i> <a href="ForeignKeytoLookupTableCRUD.htm">Foreign Key to Lookup Table CRUD</a></span>
</li>
</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="index.htm">The .NET Core ORM Cookbook</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="index.htm">Home</a></li> / <li><a href="ModelWithChildren.htm">Model with Childern CRUD</a></li></ul>
					
                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="crud-operations-on-model-with-child-records">CRUD Operations on Model with Child Records<a class="headerlink" href="#crud-operations-on-model-with-child-records" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p>This use case demonstrates performing Create, Read, Update, and Delete operations on an object that includes a collection of child records.</p>
<h2 id="prototype-repository">Prototype Repository<a class="headerlink" href="#prototype-repository" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<pre><code class="cs">public interface IProductLine&lt;TProduct&gt;
    where TProduct : IProduct
{
    public int ProductLineKey { get; set; }

    string? ProductLineName { get; set; }

    ICollection&lt;TProduct&gt; Products { get; }
}
</code></pre>

<pre><code class="cs">public interface IModelWithChildrenRepository&lt;TProductLine, TProduct&gt;
   where TProductLine : class, IProductLine&lt;TProduct&gt;, new()
   where TProduct : class, IProduct, new()
{
    /// &lt;summary&gt;
    /// Gets an TProductLine row by its primary key.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;employeeKey&quot;&gt;The employee key.&lt;/param&gt;
    /// &lt;param name=&quot;includeChildern&quot;&gt;if set to &lt;c&gt;true&lt;/c&gt; include Product records.&lt;/param&gt;
    TProductLine? GetByKey(int productLineKey, bool includeProducts);

    /// &lt;summary&gt;
    /// Get a list of product lines by name.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;productLineName&quot;&gt;Name of the product line. This is not unique.&lt;/param&gt;
    /// &lt;param name=&quot;includeProducts&quot;&gt;if set to &lt;c&gt;true&lt;/c&gt; include Product records.&lt;/param&gt;
    IList&lt;TProductLine&gt; FindByName(string productLineName, bool includeProducts);

    /// &lt;summary&gt;
    /// Gets all product lines.
    /// &lt;/summary&gt;
    IList&lt;TProductLine&gt; GetAll(bool includeProducts);

    /// &lt;summary&gt;
    /// Create a new ProductLine row, returning the new primary key.
    /// &lt;/summary&gt;
    /// &lt;remarks&gt;This MUST save any attached Product records.&lt;/remarks&gt;
    int Create(TProductLine productLine);

    /// &lt;summary&gt;
    /// Update a ProductLine row.
    /// &lt;/summary&gt;
    /// &lt;remarks&gt;Behavior when row doesn't exist is not defined. This MUST save any attached Product records. It MUST delete any Product records that were removed from the collection.&lt;/remarks&gt;
    void Update(TProductLine productLine);

    /// &lt;summary&gt;
    /// Update a Product row.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;product&quot;&gt;The product.&lt;/param&gt;
    /// &lt;remarks&gt;Behavior when row doesn't exist is not defined.&lt;/remarks&gt;
    void Update(TProduct product);

    /// &lt;summary&gt;
    /// Delete a ProductLine row using an object.
    /// &lt;/summary&gt;
    /// &lt;remarks&gt;Behavior when row doesn't exist is not defined. This MUST delete any orphaned Product records.&lt;/remarks&gt;
    void Delete(TProductLine productLine);

    /// &lt;summary&gt;
    /// Delete a ProductLine row using a key.
    /// &lt;/summary&gt;
    /// &lt;remarks&gt;Behavior when row doesn't exist is not defined. This MUST delete any orphaned Product records.&lt;/remarks&gt;
    void DeleteByKey(int productLineKey);
}
</code></pre>

<h2 id="ado.net">ADO.NET<a class="headerlink" href="#ado.net" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>TODO</p>
<h2 id="chain">Chain<a class="headerlink" href="#chain" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Chain requires operating on the parent and child objects separately.</p>
<pre><code class="cs">public class ModelWithChildrenRepository : IModelWithChildrenRepository&lt;ProductLine, Product&gt;
{
    readonly SqlServerDataSource m_DataSource;
    readonly string ProductLineTable = &quot;Production.ProductLine&quot;;
    readonly string ProductTable = &quot;Production.Product&quot;;

    public ModelWithChildrenRepository(SqlServerDataSource dataSource)
    {
        m_DataSource = dataSource;
    }

    public int Create(ProductLine productLine)
    {
        if (productLine == null)
            throw new ArgumentNullException(nameof(productLine), $&quot;{nameof(productLine)} is null.&quot;);

        using (var trans = m_DataSource.BeginTransaction())
        {
            productLine.ProductLineKey = trans.Insert(productLine).ToInt32().Execute();
            productLine.ApplyKeys();
            trans.InsertBatch(productLine.Products).Execute();
            trans.Commit();
        }

        return productLine.ProductLineKey;
    }

    public void Delete(ProductLine productLine)
    {
        if (productLine == null)
            throw new ArgumentNullException(nameof(productLine), $&quot;{nameof(productLine)} is null.&quot;);

        using (var trans = m_DataSource.BeginTransaction())
        {
            trans.DeleteWithFilter(ProductTable, new { productLine.ProductLineKey }).Execute();
            trans.Delete(productLine).Execute();
            trans.Commit();
        }
    }

    public void DeleteByKey(int productLineKey)
    {
        using (var trans = m_DataSource.BeginTransaction())
        {
            trans.DeleteWithFilter(ProductTable, new { productLineKey }).Execute();
            trans.DeleteByKey(ProductLineTable, productLineKey).Execute();
            trans.Commit();
        }
    }

    public IList&lt;ProductLine&gt; FindByName(string productLineName, bool includeProducts)
    {
        var results = m_DataSource.From(ProductLineTable, new { productLineName }).ToCollection&lt;ProductLine&gt;().Execute();
        if (results.Count &gt; 0 &amp;&amp; includeProducts)
        {
            var children = m_DataSource.GetByKeyList(ProductTable, &quot;ProductLineKey&quot;, results.Select(pl =&gt; pl.ProductLineKey)).ToCollection&lt;Product&gt;().Execute();
            foreach (var line in results)
                line.Products.AddRange(children.Where(x =&gt; x.ProductLineKey == line.ProductLineKey));
        }
        return results;
    }

    public IList&lt;ProductLine&gt; GetAll(bool includeProducts)
    {
        var results = m_DataSource.From(ProductLineTable).ToCollection&lt;ProductLine&gt;().Execute();
        if (includeProducts)
        {
            var children = m_DataSource.From(ProductTable).ToCollection&lt;Product&gt;().Execute();
            foreach (var line in results)
                line.Products.AddRange(children.Where(x =&gt; x.ProductLineKey == line.ProductLineKey));
        }
        return results;
    }

    public ProductLine? GetByKey(int productLineKey, bool includeProducts)
    {
        var result = m_DataSource.GetByKey(ProductLineTable, productLineKey).ToObject&lt;ProductLine&gt;(RowOptions.AllowEmptyResults).Execute();
        if (result != null &amp;&amp; includeProducts)
        {
            var children = m_DataSource.From(ProductTable, new { result.ProductLineKey }).ToCollection&lt;Product&gt;().Execute();
            result.Products.AddRange(children);
        }
        return result;
    }

    public void Update(ProductLine productLine)
    {
        if (productLine == null)
            throw new ArgumentNullException(nameof(productLine), $&quot;{nameof(productLine)} is null.&quot;);

        using (var trans = m_DataSource.BeginTransaction())
        {
            //Update parent row
            trans.Update(productLine).Execute();

            //Find the list of child keys to remove
            var oldKeys = trans.From(ProductTable, new { productLine.ProductLineKey }).ToInt32List(&quot;ProductKey&quot;).Execute().ToHashSet();
            foreach (var key in productLine.Products.Select(x =&gt; x.ProductKey))
                oldKeys.Remove(key);

            //Remove the old records
            foreach (var key in oldKeys)
                trans.DeleteByKey(ProductTable, key).Execute();

            //Ensure new child rows have their parent's key
            productLine.ApplyKeys();

            //Insert/update the remaining child rows
            foreach (var row in productLine.Products)
                trans.Upsert(row).Execute();

            trans.Commit();
        }
    }

    public void Update(Product product)
    {
        m_DataSource.Update(product).Execute();
    }
}
</code></pre>

<h2 id="dapper">Dapper<a class="headerlink" href="#dapper" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>TODO</p>
<h2 id="entity-framework-core">Entity Framework Core<a class="headerlink" href="#entity-framework-core" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>When performing an update, ensure that the <code>EntityState</code> is correctly set for each child record based on whether it is an insert or update.</p>
<p>For partial deletes, you have to explicitly find and delete the child rows that are no longer needed.</p>
<p>For deletes, ensure the child record in DBContext is setup with <code>.OnDelete(DeleteBehavior.Cascade)</code></p>
<pre><code class="cs">public class ModelWithChildrenRepository : IModelWithChildrenRepository&lt;ProductLine, Product&gt;
{
    private Func&lt;OrmCookbookContext&gt; CreateDbContext;

    public ModelWithChildrenRepository(Func&lt;OrmCookbookContext&gt; dBContextFactory)
    {
        CreateDbContext = dBContextFactory;
    }

    public int Create(ProductLine productLine)
    {
        if (productLine == null)
            throw new ArgumentNullException(nameof(productLine), $&quot;{nameof(productLine)} is null.&quot;);

        using (var context = CreateDbContext())
        {
            context.ProductLine.Add(productLine);
            context.SaveChanges();
            return productLine.ProductLineKey;
        }
    }

    public void Delete(ProductLine productLine)
    {
        if (productLine == null)
            throw new ArgumentNullException(nameof(productLine), $&quot;{nameof(productLine)} is null.&quot;);

        using (var context = CreateDbContext())
        {
            context.ProductLine.Remove(productLine);
            context.SaveChanges();
        }
    }

    public void DeleteByKey(int productLineKey)
    {
        using (var context = CreateDbContext())
        {
            //Need to explicitly fetch child records in order to delete them.
            var temp = context.ProductLine.Where(x =&gt; x.ProductLineKey == productLineKey).Include(x =&gt; x.Product).Single();
            context.ProductLine.Remove(temp);
            context.SaveChanges();
        }
    }

    public IList&lt;ProductLine&gt; FindByName(string productLineName, bool includeProducts)
    {
        using (var context = CreateDbContext())
        {
            if (includeProducts)
                return context.ProductLine.Where(x =&gt; x.ProductLineName == productLineName).Include(x =&gt; x.Product).ToList();
            else
                return context.ProductLine.Where(x =&gt; x.ProductLineName == productLineName).ToList();
        }
    }

    public IList&lt;ProductLine&gt; GetAll(bool includeProducts)
    {
        using (var context = CreateDbContext())
        {
            if (includeProducts)
                return context.ProductLine.Include(x =&gt; x.Product).ToList();
            else
                return context.ProductLine.ToList();
        }
    }

    public ProductLine? GetByKey(int productLineKey, bool includeProducts)
    {
        using (var context = CreateDbContext())
        {
            if (includeProducts)
                return context.ProductLine.Where(x =&gt; x.ProductLineKey == productLineKey).Include(x =&gt; x.Product).SingleOrDefault();
            else
                return context.ProductLine.Find(productLineKey);
        }
    }

    public void Update(ProductLine productLine)
    {
        if (productLine == null)
            throw new ArgumentNullException(nameof(productLine), $&quot;{nameof(productLine)} is null.&quot;);

        using (var context = CreateDbContext())
        {
            var validKeys = productLine.Product.Select(x =&gt; x.ProductKey).ToList();

            //get rows to delete
            var oldRows = context.Product.Where(x =&gt; x.ProductLineKey == productLine.ProductLineKey &amp;&amp; !validKeys.Contains(x.ProductKey)).ToList();

            //Remove the old records
            foreach (var row in oldRows)
                context.Product.Remove(row);

            context.Entry(productLine).State = EntityState.Modified;
            foreach (var item in productLine.Product)
                if (item.ProductKey == 0)
                    context.Entry(item).State = EntityState.Added;
                else
                    context.Entry(item).State = EntityState.Modified;
            context.SaveChanges();
        }
    }

    public void Update(Product product)
    {
        if (product == null)
            throw new ArgumentNullException(nameof(product), $&quot;{nameof(product)} is null.&quot;);

        using (var context = CreateDbContext())
        {
            context.Entry(product).State = EntityState.Modified;
            context.SaveChanges();
        }
    }
}
</code></pre>

<h2 id="llblgen-pro">LLBLGen Pro<a class="headerlink" href="#llblgen-pro" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>TODO</p>
<h2 id="nhibernate">NHibernate<a class="headerlink" href="#nhibernate" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>By default, NHibernate does not support a clean separation between the data access layer and the rest of the application. This is due to the way the lazy-loading works, which requires an active <code>ISession</code> even when lazy-loading isn't desired.</p>
<p>The work-around is to explicitly trigger lazy-loading when the child rows are desired. When the child rows are not desired, block lazy-loading by setting the collection property to an empty list.</p>
<p>For partial deletes, you have to explicitly find and delete the child rows that are no longer needed. Furthermore, this must be done in a separate <code>ISession</code> to avoid a <code>NonUniqueObjectException</code>.</p>
<pre><code class="cs">public class ModelWithChildrenRepository : IModelWithChildrenRepository&lt;ProductLine, Product&gt;
{
    readonly ISessionFactory m_SessionFactory;

    public ModelWithChildrenRepository(ISessionFactory sessionFactory)
    {
        m_SessionFactory = sessionFactory;
    }

    public int Create(ProductLine productLine)
    {
        if (productLine == null)
            throw new ArgumentNullException(nameof(productLine), $&quot;{nameof(productLine)} is null.&quot;);

        productLine.ApplyKeys();

        using (var session = m_SessionFactory.OpenSession())
        {
            session.Save(productLine);
            session.Flush();
            return productLine.ProductLineKey;
        }
    }

    public void Delete(ProductLine productLine)
    {
        if (productLine == null)
            throw new ArgumentNullException(nameof(productLine), $&quot;{nameof(productLine)} is null.&quot;);

        using (var session = m_SessionFactory.OpenSession())
        {
            session.Delete(productLine);
            session.Flush();
        }
    }

    public void DeleteByKey(int productLineKey)
    {
        using (var session = m_SessionFactory.OpenSession())
        {
            var temp = session.Get&lt;ProductLine&gt;(productLineKey);

            session.Delete(temp);
            session.Flush();
        }
    }

    public IList&lt;ProductLine&gt; FindByName(string productLineName, bool includeProducts)
    {
        using (var session = m_SessionFactory.OpenSession())
        {
            var result = session
                .CreateCriteria(typeof(ProductLine))
                .Add(Restrictions.Eq(&quot;ProductLineName&quot;, productLineName))
                .List&lt;ProductLine&gt;();

            if (includeProducts)
                result.SelectMany(x =&gt; x.Products).All(x =&gt; true); //force lazy-load
            else
                foreach (var line in result)
                    line.Products = new List&lt;Product&gt;();//disable lazy-loading

            return result;
        }
    }

    public IList&lt;ProductLine&gt; GetAll(bool includeProducts)
    {
        using (var session = m_SessionFactory.OpenSession())
        {
            var result = session
                .CreateCriteria(typeof(ProductLine))
                .List&lt;ProductLine&gt;();

            if (includeProducts)
                result.SelectMany(x =&gt; x.Products).All(x =&gt; true); //force lazy-load
            else
                foreach (var line in result)
                    line.Products = new List&lt;Product&gt;();//disable lazy-loading

            return result;
        }
    }

    public ProductLine? GetByKey(int productLineKey, bool includeProducts)
    {
        using (var session = m_SessionFactory.OpenSession())
        {
            var result = session.Get&lt;ProductLine&gt;(productLineKey);
            if (result != null)
            {
                if (includeProducts)
                    result.Products.All(x =&gt; true); //force lazy-load
                else
                    result.Products = new List&lt;Product&gt;(); //disable lazy-loading
            }
            return result;
        }
    }

    public void Update(ProductLine productLine)
    {
        if (productLine == null)
            throw new ArgumentNullException(nameof(productLine), $&quot;{nameof(productLine)} is null.&quot;);

        productLine.ApplyKeys();

        //Deletes have to be handled in a separate session to avoid a NHibernate.NonUniqueObjectException
        using (var session = m_SessionFactory.OpenSession())
        {
            //Find the list of child keys to remove
            var rowsToDelete = session.CreateCriteria(typeof(Product))
                .Add(Restrictions.Eq(&quot;ProductLine&quot;, productLine))
                .List&lt;Product&gt;();

            //Remove the old records
            foreach (var row in rowsToDelete)
            {
                if (!productLine.Products.Any(x =&gt; x.ProductKey == row.ProductKey))
                    session.Delete(row);
            }
            session.Flush();
        }

        using (var session = m_SessionFactory.OpenSession())
        {
            session.Update(productLine);
            session.Flush();
        }
    }

    public void Update(Product product)
    {
        if (product == null)
            throw new ArgumentNullException(nameof(product), $&quot;{nameof(product)} is null.&quot;);

        using (var session = m_SessionFactory.OpenSession())
        {
            session.Update(product);
            session.Flush();
        }
    }
}
</code></pre>

<h2 id="repodb">RepoDb<a class="headerlink" href="#repodb" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>TODO</p>
<h2 id="servicestack">ServiceStack<a class="headerlink" href="#servicestack" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>TODO</p>

                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">
The ORM Cookbook. <a href='https://github.com/Grauenwolf/DotNet-ORM-Cookbook' target='_blank'>Visit us at GitHub</a>.
                    </div>
                </footer>
            </div>
        </section>
    </div>
    <script src="js/jquery-2.1.1.min.js"></script>
    <script src="js/modernizr-2.8.3.min.js"></script>
    <script src="js/highlight.pack.js"></script>
    <script src="js/theme.js"></script>

</body>
</html>
