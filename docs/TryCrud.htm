<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>TryGet/Update/Delete Operations - The ORM Cookbook</title>
    <link rel="shortcut icon" href="favicon.ico">
    <link rel="stylesheet" href="css/theme.css" type="text/css" />
    <link rel="stylesheet" href="css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="css/styles/vs.css">
    <link rel="stylesheet" href="css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="index.htm"><i class="fa fa-home"></i> The ORM Cookbook</a>
                <div role="search">
                    <form id="search-form" class="form" action="Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="index.htm">Home</a>
</li>

<li class="tocentry"><a href="SingleModelCrud.htm">Single Model CRUD</a>
</li>
<li class="tocentry"><a href="SingleModelCrudAsync.htm">Async Operations</a>
</li>
<li class="tocentry current"><a class="current" href="TryCrud.htm">TryGet/Update/Delete Operations</a>
<ul class="currentrelative">
<li class="tocentry"><a href="#prototype-repository">Prototype Repository</a></li>

<li class="tocentry"><a href="#ado.net">ADO.NET</a></li>

<li class="tocentry"><a href="#dapper">Dapper</a></li>

<li class="tocentry"><a href="#tortuga-chain">Tortuga Chain</a></li>

<li class="tocentry"><a href="#entity-framework-core">Entity Framework Core</a></li>

<li class="tocentry"><a href="#repodb">RepoDb</a></li>

<li class="tocentry"><a href="#nhibernate">NHibernate</a></li>



</ul>
</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="index.htm">The ORM Cookbook</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="index.htm">Home</a></li> / <li><a href="TryCrud.htm">TryGet/Update/Delete Operations</a></li></ul>
					
                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="tryget-tryupdate-and-trydelete-operations">TryGet, TryUpdate, and TryDelete Operations<a class="headerlink" href="#tryget-tryupdate-and-trydelete-operations" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p>These use cases demonstrate the difference between operations that fail silently and operations that fail with an exception.</p>
<h2 id="prototype-repository">Prototype Repository<a class="headerlink" href="#prototype-repository" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<pre><code class="cs">public interface ITryCrudRepository&lt;TEmployeeClassification&gt;
   where TEmployeeClassification : class, IEmployeeClassification, new()
{
    /// &lt;summary&gt;
    /// Create a new EmployeeClassification row, returning the new primary key.
    /// &lt;/summary&gt;
    int Create(TEmployeeClassification classification);

    /// &lt;summary&gt;
    /// Delete a EmployeeClassification row using its primary key. If no matching row is found, an exception is thrown.
    /// &lt;/summary&gt;
    /// &lt;remarks&gt;The specific exception thrown is not defined.&lt;/remarks&gt;
    void DeleteByKeyOrException(int employeeClassificationKey);

    /// &lt;summary&gt;
    /// Delete a EmployeeClassification row using its primary key. Returns true if the row was updated, false if no matching row was found.
    /// &lt;/summary&gt;
    bool DeleteByKeyWithStatus(int employeeClassificationKey);

    /// &lt;summary&gt;
    /// Delete a EmployeeClassification row using an object. If no matching row is found, an exception is thrown.
    /// &lt;/summary&gt;
    /// &lt;remarks&gt;The specific exception thrown is not defined.&lt;/remarks&gt;
    void DeleteOrException(TEmployeeClassification classification);

    /// &lt;summary&gt;
    /// Delete a EmployeeClassification row using an object. Returns true if the row was updated, false if no matching row was found.
    /// &lt;/summary&gt;
    bool DeleteWithStatus(TEmployeeClassification classification);

    /// &lt;summary&gt;
    /// Gets an EmployeeClassification row by its name. If no row is found, an exception is thrown.
    /// &lt;/summary&gt;
    /// &lt;remarks&gt;The specific exception thrown is not defined.&lt;/remarks&gt;
    TEmployeeClassification FindByNameOrException(string employeeClassificationName);

    /// &lt;summary&gt;
    /// Gets an EmployeeClassification row by its name. Assume the name is unique. If no row is found, a null is returned.
    /// &lt;/summary&gt;
    TEmployeeClassification? FindByNameOrNull(string employeeClassificationName);

    /// &lt;summary&gt;
    /// Gets an EmployeeClassification row by its primary key. If no row is found, an exception is thrown.
    /// &lt;/summary&gt;
    /// &lt;remarks&gt;The specific exception thrown is not defined.&lt;/remarks&gt;
    TEmployeeClassification GetByKeyOrException(int employeeClassificationKey);

    /// &lt;summary&gt;
    /// Gets an EmployeeClassification row by its primary key. If no row is found, a null is returned.
    /// &lt;/summary&gt;
    TEmployeeClassification? GetByKeyOrNull(int employeeClassificationKey);

    /// &lt;summary&gt;
    /// Update a EmployeeClassification row. If no matching row is found, an exception is thrown.
    /// &lt;/summary&gt;
    /// &lt;remarks&gt;The specific exception thrown is not defined.&lt;/remarks&gt;
    void UpdateOrException(TEmployeeClassification classification);

    /// &lt;summary&gt;
    /// Update a EmployeeClassification row. Returns true if the row was updated, false if no matching row was found.
    /// &lt;/summary&gt;
    bool UpdateWithStatus(TEmployeeClassification classification);
}
</code></pre>

<h2 id="ado.net">ADO.NET<a class="headerlink" href="#ado.net" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>The trick to the <code>Update</code> and <code>Delete</code> methods is to read back the row counts from <code>ExecuteNonQuery</code>.</p>
<pre><code class="cs">public class TryCrudRepository : ITryCrudRepository&lt;EmployeeClassification&gt;
{
    readonly string m_ConnectionString;

    public TryCrudRepository(string connectionString)
    {
        m_ConnectionString = connectionString;
    }

    public int Create(EmployeeClassification classification)
    {
        if (classification == null)
            throw new ArgumentNullException(nameof(classification), $&quot;{nameof(classification)} is null.&quot;);

        var sql = @&quot;INSERT INTO HR.EmployeeClassification (EmployeeClassificationName)
                    OUTPUT Inserted.EmployeeClassificationKey
                    VALUES(@EmployeeClassificationName )&quot;;

        using (var con = OpenConnection())
        using (var cmd = new SqlCommand(sql, con))
        {
            cmd.Parameters.AddWithValue(&quot;@EmployeeClassificationName&quot;, classification.EmployeeClassificationName);
            return (int)cmd.ExecuteScalar();
        }
    }

    public void DeleteByKeyOrException(int employeeClassificationKey)
    {
        var sql = @&quot;DELETE HR.EmployeeClassification WHERE EmployeeClassificationKey = @EmployeeClassificationKey;&quot;;

        using (var con = OpenConnection())
        using (var cmd = new SqlCommand(sql, con))
        {
            cmd.Parameters.AddWithValue(&quot;@EmployeeClassificationKey&quot;, employeeClassificationKey);
            var rowCount = cmd.ExecuteNonQuery();
            if (rowCount == 0)
                throw new DataException($&quot;No row was found for key {employeeClassificationKey}.&quot;);
        }
    }

    public bool DeleteByKeyWithStatus(int employeeClassificationKey)
    {
        var sql = @&quot;DELETE HR.EmployeeClassification WHERE EmployeeClassificationKey = @EmployeeClassificationKey;&quot;;

        using (var con = OpenConnection())
        using (var cmd = new SqlCommand(sql, con))
        {
            cmd.Parameters.AddWithValue(&quot;@EmployeeClassificationKey&quot;, employeeClassificationKey);
            var rowCount = cmd.ExecuteNonQuery();
            return rowCount &gt; 0;
        }
    }

    public void DeleteOrException(EmployeeClassification classification)
    {
        if (classification == null)
            throw new ArgumentNullException(nameof(classification), $&quot;{nameof(classification)} is null.&quot;);

        var sql = @&quot;DELETE HR.EmployeeClassification WHERE EmployeeClassificationKey = @EmployeeClassificationKey;&quot;;

        using (var con = OpenConnection())
        using (var cmd = new SqlCommand(sql, con))
        {
            cmd.Parameters.AddWithValue(&quot;@EmployeeClassificationKey&quot;, classification.EmployeeClassificationKey);
            var rowCount = cmd.ExecuteNonQuery();
            if (rowCount == 0)
                throw new DataException($&quot;No row was found for key {classification.EmployeeClassificationKey}.&quot;);
        }
    }

    public bool DeleteWithStatus(EmployeeClassification classification)
    {
        if (classification == null)
            throw new ArgumentNullException(nameof(classification), $&quot;{nameof(classification)} is null.&quot;);

        var sql = @&quot;DELETE HR.EmployeeClassification WHERE EmployeeClassificationKey = @EmployeeClassificationKey;&quot;;

        using (var con = OpenConnection())
        using (var cmd = new SqlCommand(sql, con))
        {
            cmd.Parameters.AddWithValue(&quot;@EmployeeClassificationKey&quot;, classification.EmployeeClassificationKey);
            var rowCount = cmd.ExecuteNonQuery();
            return rowCount &gt; 0;
        }
    }

    public EmployeeClassification FindByNameOrException(string employeeClassificationName)
    {
        var sql = @&quot;SELECT  ec.EmployeeClassificationKey, ec.EmployeeClassificationName
                    FROM HR.EmployeeClassification ec
                    WHERE ec.EmployeeClassificationName = @EmployeeClassificationName;&quot;;

        using (var con = OpenConnection())
        using (var cmd = new SqlCommand(sql, con))
        {
            cmd.Parameters.AddWithValue(&quot;@EmployeeClassificationName&quot;, employeeClassificationName);
            using (var reader = cmd.ExecuteReader())
            {
                if (!reader.Read())
                    throw new DataException($&quot;No row was found for '{employeeClassificationName}'.&quot;);

                return new EmployeeClassification()
                {
                    EmployeeClassificationKey = reader.GetInt32(reader.GetOrdinal(&quot;EmployeeClassificationKey&quot;)),
                    EmployeeClassificationName = reader.GetString(reader.GetOrdinal(&quot;EmployeeClassificationName&quot;))
                };
            }
        }
    }

    public EmployeeClassification? FindByNameOrNull(string employeeClassificationName)
    {
        var sql = @&quot;SELECT  ec.EmployeeClassificationKey, ec.EmployeeClassificationName
                    FROM HR.EmployeeClassification ec
                    WHERE ec.EmployeeClassificationName = @EmployeeClassificationName;&quot;;

        using (var con = OpenConnection())
        using (var cmd = new SqlCommand(sql, con))
        {
            cmd.Parameters.AddWithValue(&quot;@EmployeeClassificationName&quot;, employeeClassificationName);
            using (var reader = cmd.ExecuteReader())
            {
                if (!reader.Read())
                    return null;

                return new EmployeeClassification()
                {
                    EmployeeClassificationKey = reader.GetInt32(reader.GetOrdinal(&quot;EmployeeClassificationKey&quot;)),
                    EmployeeClassificationName = reader.GetString(reader.GetOrdinal(&quot;EmployeeClassificationName&quot;))
                };
            }
        }
    }

    public EmployeeClassification GetByKeyOrException(int employeeClassificationKey)
    {
        var sql = @&quot;SELECT ec.EmployeeClassificationKey, ec.EmployeeClassificationName
                    FROM HR.EmployeeClassification ec
                    WHERE ec.EmployeeClassificationKey = @EmployeeClassificationKey;&quot;;

        using (var con = OpenConnection())
        using (var cmd = new SqlCommand(sql, con))
        {
            cmd.Parameters.AddWithValue(&quot;@EmployeeClassificationKey&quot;, employeeClassificationKey);
            using (var reader = cmd.ExecuteReader())
            {
                if (!reader.Read())
                    throw new DataException($&quot;No row was found for key {employeeClassificationKey}.&quot;);

                return new EmployeeClassification()
                {
                    EmployeeClassificationKey = reader.GetInt32(reader.GetOrdinal(&quot;EmployeeClassificationKey&quot;)),
                    EmployeeClassificationName = reader.GetString(reader.GetOrdinal(&quot;EmployeeClassificationName&quot;))
                };
            }
        }
    }

    public EmployeeClassification? GetByKeyOrNull(int employeeClassificationKey)
    {
        var sql = @&quot;SELECT ec.EmployeeClassificationKey, ec.EmployeeClassificationName
                    FROM HR.EmployeeClassification ec
                    WHERE ec.EmployeeClassificationKey = @EmployeeClassificationKey;&quot;;

        using (var con = OpenConnection())
        using (var cmd = new SqlCommand(sql, con))
        {
            cmd.Parameters.AddWithValue(&quot;@EmployeeClassificationKey&quot;, employeeClassificationKey);
            using (var reader = cmd.ExecuteReader())
            {
                if (!reader.Read())
                    return null;

                return new EmployeeClassification()
                {
                    EmployeeClassificationKey = reader.GetInt32(reader.GetOrdinal(&quot;EmployeeClassificationKey&quot;)),
                    EmployeeClassificationName = reader.GetString(reader.GetOrdinal(&quot;EmployeeClassificationName&quot;))
                };
            }
        }
    }

    public void UpdateOrException(EmployeeClassification classification)
    {
        if (classification == null)
            throw new ArgumentNullException(nameof(classification), $&quot;{nameof(classification)} is null.&quot;);

        var sql = @&quot;UPDATE HR.EmployeeClassification
                    SET EmployeeClassificationName = @EmployeeClassificationName
                    WHERE EmployeeClassificationKey = @EmployeeClassificationKey;&quot;;

        using (var con = OpenConnection())
        using (var cmd = new SqlCommand(sql, con))
        {
            cmd.Parameters.AddWithValue(&quot;@EmployeeClassificationKey&quot;, classification.EmployeeClassificationKey);
            cmd.Parameters.AddWithValue(&quot;@EmployeeClassificationName&quot;, classification.EmployeeClassificationName);
            var rowCount = cmd.ExecuteNonQuery();
            if (rowCount == 0)
                throw new DataException($&quot;No row was found for key {classification.EmployeeClassificationKey}.&quot;);
        }
    }

    public bool UpdateWithStatus(EmployeeClassification classification)
    {
        if (classification == null)
            throw new ArgumentNullException(nameof(classification), $&quot;{nameof(classification)} is null.&quot;);

        var sql = @&quot;UPDATE HR.EmployeeClassification
                    SET EmployeeClassificationName = @EmployeeClassificationName
                    WHERE EmployeeClassificationKey = @EmployeeClassificationKey;&quot;;

        using (var con = OpenConnection())
        using (var cmd = new SqlCommand(sql, con))
        {
            cmd.Parameters.AddWithValue(&quot;@EmployeeClassificationKey&quot;, classification.EmployeeClassificationKey);
            cmd.Parameters.AddWithValue(&quot;@EmployeeClassificationName&quot;, classification.EmployeeClassificationName);
            var rowCount = cmd.ExecuteNonQuery();
            return rowCount &gt; 0;
        }
    }

    /// &lt;summary&gt;
    /// Opens a database connection.
    /// &lt;/summary&gt;
    /// &lt;remarks&gt;Caller must dispose the connection.&lt;/remarks&gt;
    SqlConnection OpenConnection()
    {
        var con = new SqlConnection(m_ConnectionString);
        con.Open();
        return con;
    }
}
</code></pre>

<h2 id="dapper">Dapper<a class="headerlink" href="#dapper" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>TODO</p>
<pre><code class="cs">public class TryCrudRepository : ITryCrudRepository&lt;EmployeeClassification&gt;
{
    public int Create(EmployeeClassification classification)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public void DeleteByKeyOrException(int employeeClassificationKey)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public bool DeleteByKeyWithStatus(int employeeClassificationKey)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public void DeleteOrException(EmployeeClassification classification)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public bool DeleteWithStatus(EmployeeClassification classification)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public EmployeeClassification FindByNameOrException(string employeeClassificationName)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public EmployeeClassification? FindByNameOrNull(string employeeClassificationName)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public EmployeeClassification GetByKeyOrException(int employeeClassificationKey)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public EmployeeClassification? GetByKeyOrNull(int employeeClassificationKey)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public void UpdateOrException(EmployeeClassification classification)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public bool UpdateWithStatus(EmployeeClassification classification)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }
}
</code></pre>

<h2 id="tortuga-chain">Tortuga Chain<a class="headerlink" href="#tortuga-chain" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>TODO</p>
<pre><code class="cs">public class TryCrudRepository : ITryCrudRepository&lt;EmployeeClassification&gt;
{
    const string TableName = &quot;HR.EmployeeClassification&quot;;
    readonly SqlServerDataSource m_DataSource;

    public TryCrudRepository(SqlServerDataSource dataSource)
    {
        m_DataSource = dataSource;
    }

    public int Create(EmployeeClassification classification)
    {
        if (classification == null)
            throw new ArgumentNullException(nameof(classification), $&quot;{nameof(classification)} is null.&quot;);

        return m_DataSource.Insert(classification).ToInt32().Execute();
    }

    public void DeleteByKeyOrException(int employeeClassificationKey)
    {
        m_DataSource.DeleteByKey(TableName, employeeClassificationKey).Execute();
    }

    public bool DeleteByKeyWithStatus(int employeeClassificationKey)
    {
        m_DataSource.DeleteByKey(TableName, employeeClassificationKey).Execute();
        return true;
    }

    public void DeleteOrException(EmployeeClassification classification)
    {
        if (classification == null)
            throw new ArgumentNullException(nameof(classification), $&quot;{nameof(classification)} is null.&quot;);

        m_DataSource.Delete(classification).Execute();
    }

    public bool DeleteWithStatus(EmployeeClassification classification)
    {
        if (classification == null)
            throw new ArgumentNullException(nameof(classification), $&quot;{nameof(classification)} is null.&quot;);

        m_DataSource.Delete(classification).Execute();
        return true;
    }

    public EmployeeClassification FindByNameOrException(string employeeClassificationName)
    {
        return m_DataSource.From(TableName, new { EmployeeClassificationName = employeeClassificationName }).ToObject&lt;EmployeeClassification&gt;().Execute()!;
    }

    public EmployeeClassification? FindByNameOrNull(string employeeClassificationName)
    {
        return m_DataSource.From(TableName, new { EmployeeClassificationName = employeeClassificationName }).ToObject&lt;EmployeeClassification&gt;().Execute()!;
    }

    public EmployeeClassification GetByKeyOrException(int employeeClassificationKey)
    {
        return m_DataSource.GetByKey(TableName, employeeClassificationKey).ToObject&lt;EmployeeClassification&gt;().NeverNull().Execute();
    }

    public EmployeeClassification? GetByKeyOrNull(int employeeClassificationKey)
    {
        return m_DataSource.GetByKey(TableName, employeeClassificationKey).ToObject&lt;EmployeeClassification&gt;(RowOptions.AllowEmptyResults).Execute();
    }

    public void UpdateOrException(EmployeeClassification classification)
    {
        if (classification == null)
            throw new ArgumentNullException(nameof(classification), $&quot;{nameof(classification)} is null.&quot;);

        m_DataSource.Update(classification).Execute();
    }

    public bool UpdateWithStatus(EmployeeClassification classification)
    {
        if (classification == null)
            throw new ArgumentNullException(nameof(classification), $&quot;{nameof(classification)} is null.&quot;);

        m_DataSource.Update(classification).Execute();
        return true;
    }
}
</code></pre>

<h2 id="entity-framework-core">Entity Framework Core<a class="headerlink" href="#entity-framework-core" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>TODO</p>
<pre><code class="cs">public class TryCrudRepository : ITryCrudRepository&lt;EmployeeClassification&gt;
{
    public int Create(EmployeeClassification classification)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public void DeleteByKeyOrException(int employeeClassificationKey)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public bool DeleteByKeyWithStatus(int employeeClassificationKey)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public void DeleteOrException(EmployeeClassification classification)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public bool DeleteWithStatus(EmployeeClassification classification)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public EmployeeClassification FindByNameOrException(string employeeClassificationName)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public EmployeeClassification? FindByNameOrNull(string employeeClassificationName)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public EmployeeClassification GetByKeyOrException(int employeeClassificationKey)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public EmployeeClassification? GetByKeyOrNull(int employeeClassificationKey)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public void UpdateOrException(EmployeeClassification classification)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public bool UpdateWithStatus(EmployeeClassification classification)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }
}
</code></pre>

<h2 id="repodb">RepoDb<a class="headerlink" href="#repodb" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>TODO</p>
<pre><code class="cs">public class TryCrudRepository : ITryCrudRepository&lt;EmployeeClassification&gt;
{
    public int Create(EmployeeClassification classification)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public void DeleteByKeyOrException(int employeeClassificationKey)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public bool DeleteByKeyWithStatus(int employeeClassificationKey)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public void DeleteOrException(EmployeeClassification classification)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public bool DeleteWithStatus(EmployeeClassification classification)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public EmployeeClassification FindByNameOrException(string employeeClassificationName)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public EmployeeClassification? FindByNameOrNull(string employeeClassificationName)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public EmployeeClassification GetByKeyOrException(int employeeClassificationKey)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public EmployeeClassification? GetByKeyOrNull(int employeeClassificationKey)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public void UpdateOrException(EmployeeClassification classification)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public bool UpdateWithStatus(EmployeeClassification classification)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }
}
</code></pre>

<h2 id="nhibernate">NHibernate<a class="headerlink" href="#nhibernate" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>TODO</p>
<pre><code class="cs">public class TryCrudRepository : ITryCrudRepository&lt;EmployeeClassification&gt;
{
    public int Create(EmployeeClassification classification)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public void DeleteByKeyOrException(int employeeClassificationKey)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public bool DeleteByKeyWithStatus(int employeeClassificationKey)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public void DeleteOrException(EmployeeClassification classification)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public bool DeleteWithStatus(EmployeeClassification classification)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public EmployeeClassification FindByNameOrException(string employeeClassificationName)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public EmployeeClassification? FindByNameOrNull(string employeeClassificationName)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public EmployeeClassification GetByKeyOrException(int employeeClassificationKey)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public EmployeeClassification? GetByKeyOrNull(int employeeClassificationKey)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public void UpdateOrException(EmployeeClassification classification)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }

    public bool UpdateWithStatus(EmployeeClassification classification)
    {
        throw new AssertInconclusiveException(&quot;TODO&quot;);
    }
}
</code></pre>


                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">
The ORM Cookbook. <a href='https://github.com/Grauenwolf/DotNet-ORM-Cookbook' target='_blank'>Visit us at GitHub</a>.
                    </div>
                </footer>
            </div>
        </section>
    </div>
    <script src="js/jquery-2.1.1.min.js"></script>
    <script src="js/modernizr-2.8.3.min.js"></script>
    <script src="js/highlight.pack.js"></script>
    <script src="js/theme.js"></script>

</body>
</html>
