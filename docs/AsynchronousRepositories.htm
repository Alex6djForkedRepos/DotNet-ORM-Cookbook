<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Asynchronous Repositories - The ORM Cookbook</title>
    <link rel="shortcut icon" href="favicon.ico">
    <link rel="stylesheet" href="css/theme.css" type="text/css" />
    <link rel="stylesheet" href="css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="css/styles/vs.css">
    <link rel="stylesheet" href="css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="index.htm"><i class="fa fa-home"></i> The ORM Cookbook</a>
                <div role="search">
                    <form id="search-form" class="form" action="Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="index.htm">Home</a>
</li>

<li class="tocentry"><a href="Introduction.htm">Introduction</a>
</li>
<li class="tocentry"><a href="SingleModelRepositories.htm">Single Model Repositories</a>
</li>
<li class="tocentry current"><a class="current" href="AsynchronousRepositories.htm">Asynchronous Repositories</a>
<ul class="currentrelativeroot">
<li class="tocentry"><a href="#prototype-repository">Prototype Repository</a></li>
<li class="tocentry"><a href="#ado.net">ADO.NET</a></li>
<li class="tocentry"><a href="#dapper">Dapper</a></li>
<li class="tocentry"><a href="#tortuga-chain">Tortuga Chain</a></li>
<li class="tocentry"><a href="#entity-framework">Entity Framework</a></li>
<li class="tocentry"><a href="#nhibernate">NHibernate</a></li>
</ul>
<li class="tocentry"><a href="ModelWithSingleChild.htm">Model with Single Child</a>
</li>
</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="index.htm">The ORM Cookbook</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="index.htm">Home</a></li> / <li><a href="AsynchronousRepositories.htm">Asynchronous Repositories</a></li></ul>
					
                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="use-case-asynchronous-repositories">Use Case: Asynchronous Repositories<a class="headerlink" href="#use-case-asynchronous-repositories" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p>This use case demonstrates the use of asynchronous CRUD operations. Asynchronous database calls are generally preferable, as they allow for more throughput in server applications and prevent UI blocking in GUI applications.</p>
<h2 id="prototype-repository">Prototype Repository<a class="headerlink" href="#prototype-repository" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>The prototype repository based on our “Single Model Repositories” use case, with a slight modification to the signatures. </p>
<pre><code class="csharp">public interface IEmployeeClassificationAsynchronousRepository
{
    Task&lt;EmployeeClassification&gt; GetByKeyAsync(int employeeClassificationKey);

    Task&lt;EmployeeClassification&gt; FindByNameAsync(string employeeClassificationName);

    Task&lt;IList&lt;EmployeeClassification&gt;&gt; GetAllAsync();

    Task&lt;int&gt; CreateAsync(EmployeeClassificationclassification);
    Task UpdateAsync(EmployeeClassificationclassification);
    Task DeleteAsync(EmployeeClassificationclassification);
    Task DeleteAsync(int employeeClassificationKey);
} 
</code></pre>

<p>No changes are needed for the model in any of these examples.</p>
<h2 id="ado.net">ADO.NET<a class="headerlink" href="#ado.net" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>To make an ADO.NET repository asynchronous, simply add <code>await</code> and <code>Async</code> in the appropriate places. </p>
<pre><code class="cs">public class EmployeeClassificationAsynchronousRepository : IEmployeeClassificationAsynchronousRepository&lt;EmployeeClassification&gt;
{

    readonly string m_ConnectionString;
    public EmployeeClassificationAsynchronousRepository(string connectionString)
    {
        m_ConnectionString = connectionString;
    }

    public async Task&lt;int&gt; CreateAsync(EmployeeClassification classification)
    {
        var sql = @&quot;INSERT INTO HR.EmployeeClassification (EmployeeClassificationName) 
                    OUTPUT Inserted.EmployeeClassificationKey 
                    VALUES(@EmployeeClassificationName )&quot;;

        using (var con = new SqlConnection(m_ConnectionString))
        {
            await con.OpenAsync();
            using (var cmd = new SqlCommand(sql, con))
            {
                cmd.Parameters.AddWithValue(&quot;@EmployeeClassificationName&quot;, classification.EmployeeClassificationName);
                return (int)await cmd.ExecuteScalarAsync();
            }
        }
    }

    public async Task DeleteAsync(EmployeeClassification classification)
    {
        var sql = @&quot;DELETE HR.EmployeeClassification WHERE EmployeeClassificationKey = @EmployeeClassificationKey;&quot;;

        using (var con = new SqlConnection(m_ConnectionString))
        {
            await con.OpenAsync();

            using (var cmd = new SqlCommand(sql, con))
            {
                cmd.Parameters.AddWithValue(&quot;@EmployeeClassificationKey&quot;, classification.EmployeeClassificationKey);
                await cmd.ExecuteNonQueryAsync();
            }
        }
    }

    public async Task DeleteAsync(int employeeClassificationKey)
    {
        var sql = @&quot;DELETE HR.EmployeeClassification WHERE EmployeeClassificationKey = @EmployeeClassificationKey;&quot;;

        using (var con = new SqlConnection(m_ConnectionString))
        {
            await con.OpenAsync();

            using (var cmd = new SqlCommand(sql, con))
            {
                cmd.Parameters.AddWithValue(&quot;@EmployeeClassificationKey&quot;, employeeClassificationKey);
                await cmd.ExecuteNonQueryAsync();
            }
        }
    }


    public async Task&lt;EmployeeClassification&gt; FindByNameAsync(string employeeClassificationName)
    {
        var sql = @&quot;SELECT  ec.EmployeeClassificationKey, ec.EmployeeClassificationName 
                    FROM HR.EmployeeClassification ec
                    WHERE ec.EmployeeClassificationName = @EmployeeClassificationName;&quot;;

        using (var con = new SqlConnection(m_ConnectionString))
        {
            await con.OpenAsync();

            using (var cmd = new SqlCommand(sql, con))
            {
                cmd.Parameters.AddWithValue(&quot;@EmployeeClassificationName&quot;, employeeClassificationName);
                using (var reader = await cmd.ExecuteReaderAsync())
                {
                    if (!await reader.ReadAsync())
                        return null;

                    return new EmployeeClassification()
                    {
                        EmployeeClassificationKey = reader.GetInt32(reader.GetOrdinal(&quot;EmployeeClassificationKey&quot;)),
                        EmployeeClassificationName = reader.GetString(reader.GetOrdinal(&quot;EmployeeClassificationName&quot;))
                    };
                }
            }
        }
    }

    public async Task&lt;IList&lt;EmployeeClassification&gt;&gt; GetAllAsync()
    {
        var sql = @&quot;SELECT  ec.EmployeeClassificationKey, ec.EmployeeClassificationName FROM HR.EmployeeClassification ec;&quot;;

        var result = new List&lt;EmployeeClassification&gt;();

        using (var con = new SqlConnection(m_ConnectionString))
        {
            await con.OpenAsync();

            using (var cmd = new SqlCommand(sql, con))
            {
                using (var reader = await cmd.ExecuteReaderAsync())
                {
                    while (await reader.ReadAsync())
                    {
                        result.Add(new EmployeeClassification()
                        {
                            EmployeeClassificationKey = reader.GetInt32(reader.GetOrdinal(&quot;EmployeeClassificationKey&quot;)),
                            EmployeeClassificationName = reader.GetString(reader.GetOrdinal(&quot;EmployeeClassificationName&quot;))
                        });
                    }
                    return result;
                }
            }
        }
    }


    public async Task&lt;EmployeeClassification&gt; GetByKeyAsync(int employeeClassificationKey)
    {
        var sql = @&quot;SELECT ec.EmployeeClassificationKey, ec.EmployeeClassificationName
                    FROM HR.EmployeeClassification ec
                    WHERE ec.EmployeeClassificationKey = @EmployeeClassificationKey;&quot;;

        using (var con = new SqlConnection(m_ConnectionString))
        {
            await con.OpenAsync();

            using (var cmd = new SqlCommand(sql, con))
            {
                cmd.Parameters.AddWithValue(&quot;@EmployeeClassificationKey&quot;, employeeClassificationKey);
                using (var reader = await cmd.ExecuteReaderAsync())
                {
                    if (!await reader.ReadAsync())
                        return null;

                    return new EmployeeClassification()
                    {
                        EmployeeClassificationKey = reader.GetInt32(reader.GetOrdinal(&quot;EmployeeClassificationKey&quot;)),
                        EmployeeClassificationName = reader.GetString(reader.GetOrdinal(&quot;EmployeeClassificationName&quot;))
                    };
                }
            }
        }
    }


    public async Task UpdateAsync(EmployeeClassification classification)
    {
        var sql = @&quot;UPDATE HR.EmployeeClassification 
                    SET EmployeeClassificationName = @EmployeeClassificationName 
                    WHERE EmployeeClassificationKey = @EmployeeClassificationKey;&quot;;

        using (var con = new SqlConnection(m_ConnectionString))
        {
            await con.OpenAsync();
            using (var cmd = new SqlCommand(sql, con))
            {
                cmd.Parameters.AddWithValue(&quot;@EmployeeClassificationKey&quot;, classification.EmployeeClassificationKey);
                cmd.Parameters.AddWithValue(&quot;@EmployeeClassificationName&quot;, classification.EmployeeClassificationName);
                await cmd.ExecuteNonQueryAsync();
            }
        }
    }
}
</code></pre>

<h2 id="dapper">Dapper<a class="headerlink" href="#dapper" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>To make a Dapper repository asynchronous, simply add <code>await</code> and <code>Async</code> in the appropriate places. </p>
<pre><code class="cs">public class EmployeeClassificationAsynchronousRepository : IEmployeeClassificationAsynchronousRepository&lt;EmployeeClassification&gt;
{

    readonly string m_ConnectionString;
    public EmployeeClassificationAsynchronousRepository(string connectionString)
    {
        m_ConnectionString = connectionString;
    }

    public async Task&lt;int&gt; CreateAsync(EmployeeClassification classification)
    {
        var sql = @&quot;INSERT INTO HR.EmployeeClassification (EmployeeClassificationName) 
                    OUTPUT Inserted.EmployeeClassificationKey 
                    VALUES (@EmployeeClassificationName )&quot;;
        using (var con = new SqlConnection(m_ConnectionString))
        {
            await con.OpenAsync();
            return await con.ExecuteScalarAsync&lt;int&gt;(sql, classification);
        }
    }

    public async Task DeleteAsync(EmployeeClassification classification)
    {
        var sql = @&quot;DELETE HR.EmployeeClassification WHERE EmployeeClassificationKey = @EmployeeClassificationKey;&quot;;

        using (var con = new SqlConnection(m_ConnectionString))
        {
            await con.OpenAsync();
            await con.ExecuteAsync(sql, classification);
        }
    }

    public async Task DeleteAsync(int employeeClassificationKey)
    {
        var sql = @&quot;DELETE HR.EmployeeClassification WHERE EmployeeClassificationKey = @EmployeeClassificationKey;&quot;;

        using (var con = new SqlConnection(m_ConnectionString))
        {
            await con.OpenAsync();
            await con.ExecuteAsync(sql, new { EmployeeClassificationKey = employeeClassificationKey });
        }
    }

    public async Task&lt;EmployeeClassification&gt; FindByNameAsync(string employeeClassificationName)
    {
        var sql = @&quot;SELECT  ec.EmployeeClassificationKey, ec.EmployeeClassificationName 
                    FROM HR.EmployeeClassification ec
                    WHERE ec.EmployeeClassificationName = @EmployeeClassificationName;&quot;;

        using (var con = new SqlConnection(m_ConnectionString))
        {
            await con.OpenAsync();

            return await con.QuerySingleAsync&lt;EmployeeClassification&gt;(sql, new { EmployeeClassificationName = employeeClassificationName });
        }
    }

    public async Task&lt;IList&lt;EmployeeClassification&gt;&gt; GetAllAsync()
    {
        var sql = @&quot;SELECT  ec.EmployeeClassificationKey, ec.EmployeeClassificationName FROM HR.EmployeeClassification ec;&quot;;

        var result = new List&lt;EmployeeClassification&gt;();

        using (var con = new SqlConnection(m_ConnectionString))
        {
            await con.OpenAsync();
            return (await con.QueryAsync&lt;EmployeeClassification&gt;(sql)).ToList();
        }
    }


    public async Task&lt;EmployeeClassification&gt; GetByKeyAsync(int employeeClassificationKey)
    {
        var sql = @&quot;SELECT ec.EmployeeClassificationKey, ec.EmployeeClassificationName
                    FROM HR.EmployeeClassification ec
                    WHERE ec.EmployeeClassificationKey = @EmployeeClassificationKey;&quot;;

        using (var con = new SqlConnection(m_ConnectionString))
        {
            await con.OpenAsync();
            return await con.QuerySingleAsync&lt;EmployeeClassification&gt;(sql, new { EmployeeClassificationKey = employeeClassificationKey });
        }
    }

    public async Task UpdateAsync(EmployeeClassification classification)
    {
        var sql = @&quot;UPDATE HR.EmployeeClassification 
                    SET EmployeeClassificationName = @EmployeeClassificationName 
                    WHERE EmployeeClassificationKey = @EmployeeClassificationKey;&quot;;

        using (var con = new SqlConnection(m_ConnectionString))
        {
            await con.OpenAsync();
            await con.ExecuteAsync(sql, classification);
        }
    }
}
</code></pre>

<h2 id="tortuga-chain">Tortuga Chain<a class="headerlink" href="#tortuga-chain" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>In Chain, calls to <code>.Execute()</code> are replaced with <code>.ExecuteAsync()</code>.</p>
<pre><code class="cs">public class EmployeeClassificationAsynchronousRepository : IEmployeeClassificationAsynchronousRepository&lt;EmployeeClassification&gt;
{
    const string TableName = &quot;HR.EmployeeClassification&quot;;
    readonly SqlServerDataSource m_DataSource;
    public EmployeeClassificationAsynchronousRepository(SqlServerDataSource dataSource)
    {
        m_DataSource = dataSource;
    }

    public async Task&lt;int&gt; CreateAsync(EmployeeClassification classification)
    {
        return await m_DataSource.Insert(classification).ToInt32().ExecuteAsync();
    }

    public async Task DeleteAsync(int employeeClassificationKey)
    {
        await m_DataSource.DeleteByKey(TableName, employeeClassificationKey).ExecuteAsync();
    }

    public async Task DeleteAsync(EmployeeClassification classification)
    {
        await m_DataSource.Delete(classification).ExecuteAsync();
    }

    public async Task&lt;EmployeeClassification&gt; FindByNameAsync(string employeeClassificationName)
    {
        return await m_DataSource.From(TableName, new { EmployeeClassificationName = employeeClassificationName }).ToObject&lt;EmployeeClassification&gt;().ExecuteAsync();
    }

    public async Task&lt;IList&lt;EmployeeClassification&gt;&gt; GetAllAsync()
    {
        return await m_DataSource.From(TableName).ToCollection&lt;EmployeeClassification&gt;().ExecuteAsync();
    }

    public async Task&lt;EmployeeClassification&gt; GetByKeyAsync(int employeeClassificationKey)
    {
        return await m_DataSource.GetByKey(TableName, employeeClassificationKey).ToObject&lt;EmployeeClassification&gt;().ExecuteAsync();
    }

    public async Task UpdateAsync(EmployeeClassification classification)
    {
        await m_DataSource.Update(classification).ExecuteAsync();
    }
}
</code></pre>

<h2 id="entity-framework">Entity Framework<a class="headerlink" href="#entity-framework" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>To make an Entity Framework repository asynchronous, you need to import the <code>System.Data.Entity</code> namespace. This creates the async version of the LINQ extension methods needed. </p>
<pre><code class="cs">public class EmployeeClassificationAsynchronousRepository : IEmployeeClassificationAsynchronousRepository&lt;EmployeeClassification&gt;
{

    public async Task&lt;int&gt; CreateAsync(EmployeeClassification classification)
    {
        using (var context = new OrmCookbook())
        {
            context.EmployeeClassifications.Add(classification);
            await context.SaveChangesAsync();
            return classification.EmployeeClassificationKey;
        }
    }

    public async Task DeleteAsync(int employeeClassificationKey)
    {
        using (var context = new OrmCookbook())
        {
            var temp = await context.EmployeeClassifications.FindAsync(employeeClassificationKey);
            if (temp != null)
            {
                context.EmployeeClassifications.Remove(temp);
                await context.SaveChangesAsync();
            }
        }
    }

    public async Task DeleteAsync(EmployeeClassification classification)
    {
        using (var context = new OrmCookbook())
        {
            var temp = await context.EmployeeClassifications.FindAsync(classification.EmployeeClassificationKey);
            if (temp != null)
            {
                context.EmployeeClassifications.Remove(temp);
                await context.SaveChangesAsync();
            }
        }
    }

    public async Task&lt;EmployeeClassification&gt; FindByNameAsync(string employeeClassificationName)
    {
        using (var context = new OrmCookbook())
        {
            return await context.EmployeeClassifications.Where(ec =&gt; ec.EmployeeClassificationName == employeeClassificationName).SingleOrDefaultAsync();
        }
    }

    public async Task&lt;IList&lt;EmployeeClassification&gt;&gt; GetAllAsync()
    {
        using (var context = new OrmCookbook())
        {
            return await context.EmployeeClassifications.ToListAsync();
        }
    }

    public async Task&lt;EmployeeClassification&gt; GetByKeyAsync(int employeeClassificationKey)
    {
        using (var context = new OrmCookbook())
        {
            return await context.EmployeeClassifications.FindAsync(employeeClassificationKey);
        }
    }


    public async Task UpdateAsync(EmployeeClassification classification)
    {
        using (var context = new OrmCookbook())
        {
            var temp = await context.EmployeeClassifications.FindAsync(classification.EmployeeClassificationKey);
            temp.EmployeeClassificationName = classification.EmployeeClassificationName;
            await context.SaveChangesAsync();
        }
    }
}
</code></pre>

<h2 id="nhibernate">NHibernate<a class="headerlink" href="#nhibernate" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>NHibernate does not support asynchronous calls. To ensure UI responsiveness, use <code>Task.Run</code> calls to create awaitable tasks that run on a background thread. (Do not use <code>Task.Run</code> in a server scenario.)</p>

                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">
The ORM Cookbook. <a href='https://github.com/Grauenwolf/DotNet-ORM-Cookbook' target='_blank'>Visit us at GitHub</a>.
                    </div>
                </footer>
            </div>
        </section>
    </div>
    <script src="js/jquery-2.1.1.min.js"></script>
    <script src="js/modernizr-2.8.3.min.js"></script>
    <script src="js/highlight.pack.js"></script>
    <script src="js/theme.js"></script>

</body>
</html>
