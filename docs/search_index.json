{
  "docs": [
    {
      "location": "FAQ.htm",
      "breadcrumbs": "Home / FAQ",
      "keywords": "2nd a abide abstract access Access accomplished achieve actual add adhere all All allowed also an and Another any application Application applies Architecture are around as Asked assists associated based basic be both business by call Can case cases class classes close code concerns connection connections Connections consider Consumers context conventions cookbook Core create Creating currently custom DAL data Data database databases DBContext design designing details developer development dictate different Different do does doesn don DTOs early Edition EmployeeClassification encapsulate Encapsulate entire entities etc example excessive exist expose favorite following for For Frequently fulfill function functionality fundamental general Generally generating given goals Guide guidelines have headers helper hide higher hold how I if If in In include inject intention interact interface interfaces internal involved IQueryable is ISession it It just knowledge late layer Layer level logic long maintenance managed managing mapping maximize may mean meaning Microsoft my necessarily need NET Never no not null objects of once open or order ORM ORMs other our part passed pattern perform performance periods permitted phase planning possible project queries Questions reason record repositories repository Repository requirement resources responsible returns security Separating Server should so solutions something source sources speaking specific SQL storage structures such support t tasked techniques technologies term test that That the The them this This through to To TypedDataSets use used uses using utility valuable want wants way we What when Why will willing with within work XML Yes you",
      "title": "FAQ"
    },
    {
      "location": "SingleModelCrud.htm",
      "breadcrumbs": "Home / Single Model CRUD",
      "keywords": "1 30 a A Action actually Ado ADO adornment alert All amount an and annotations applies are as aspx associate attribute attributes base Based basic be before below better block boilerplate Build but call called calls can cannot case cases Chain class code Code column Column complex configuration ConfigureSessionFactory context convenient core Core could covers create Create CRUD cs csharp Dapper database DbContext DbSet delete Delete Depending design does doesn done each EDMX ef efcore eliminates Embedded EmployeeClassification EmployeeClassificationKey EmployeeClassificationName EmployeeClassifications end Entities Entity EntityFrameworkCore entityframeworktutorial error essentially every example existing extra extraneous far file files Finally first First Flush for For Framework from further general generate generated get has have hbm heavily helper Here Hibernate how However HR https implementations implicitly Improved in In includes info information Instead int interesting interfaces internally invoke is ISingleModelCrudRepository it its itself Java just key Key keys leaving less literally ll long mapping Mappings match mean means metadata methods minimal model Model models modifications more name names need needed needs net NET NHibernate no normally not of often oldest on one operation operations or OrmCookbook ORMs other Other overridden partial participate per performing primary property Prototype public Rather raw read Read really Recipes reduce refers relies RepoDb repository Repository represents requires resemebles resource revised row rule rules runtime s same see ServiceStack SessionFactory set setup Setup shown single Single SingleModelCrud SingleModelCrudRepository SingleModelCrudRepository2 snippet so some speaking specific specified SQL standard stitch Strictly string StringLength strings style such t table Table tag TEmployeeClassification that the The there There These they this This to To together tooling Tortuga update Update use used using various version virtual was what when which will with With Without written www xml XML you",
      "title": "Single Model CRUD"
    },
    {
      "location": "SingleModelCrudAsync.htm",
      "breadcrumbs": "Home / Async Operations",
      "keywords": "1 a add adds Ado ADO and another any appropriate are arrays As async Async attempt await be becomes between but But can cancel cancellable cancellation case cases Chain changes CommandDefinition completing condition ConfigureAwait Core create CRUD cs Dapper database done Entity EntityFrameworkCore example exceptions explicitly false for For Framework full future general GetByKey GetByKeyAsync handled Here htm if If in including is ISingleModelCrudAsyncRepository it loading may Model must need NET NHibernate non not object of only open operation operations or Original Otherwise parameter parameters places Prototype provided query race read reason Recipes record records repository Repository required rule safely ServiceStack set Single SingleModelCrud SingleModelCrudAsync SingleModelCrudAsyncRepository SingleModelCrudRepository snippet support TEmployeeClassification that the The then There they think this This to token tokens Tortuga transactions try use user users which will wish with With wrap write you your",
      "title": "Async Operations"
    },
    {
      "location": "TryCrud.htm",
      "breadcrumbs": "Home / TryGet/Update/Delete Operations",
      "keywords": "1 a Ado ADO an and as back between cases catch Chain command Core counts cs Dapper Delete demonstrate difference Entity EntityFrameworkCore exception Execute ExecuteNonQuery fail Framework from In is ITryCrudRepository Like methods need NET NHibernate no operations Operations or Prototype read Recipes RepoDb Repository returned row ServiceStack silently snippet some StaleStateException TEmployeeClassification that the The there These this to TODO Tortuga trick TryCrud TryCrudRepository TryDelete TryGet TryUpdate Update use uses with you",
      "title": "TryGet/Update/Delete Operations"
    },
    {
      "location": "PartialUpdate.htm",
      "breadcrumbs": "Home / Partial Updates",
      "keywords": "1 a Ado ADO and are be cases Chain column columns Core cs Dapper demonstrate e Entity EntityFrameworkCore fetch filter first Framework g have how in In IPartialUpdateRepository it key modify NET NHibernate on one parameter partial Partial PartialUpdate PartialUpdateRepository passed perform primary Prototype Recipes record RepoDb Repository row s separate ServiceStack snippet then These to To TODO Tortuga unpacked update Updated updates Updates UpdateWithObject UpdateWithSeparateParameters use",
      "title": "Partial Updates"
    },
    {
      "location": "Immutable.htm",
      "breadcrumbs": "Home / Immutable CRUD",
      "keywords": "1 a ADO after and are be before between by call can cases Chain changes constructor Constructor conversions Core Create CRUD cs Dapper default Delete demonstrate directly does doesn either EmployeeClassification entity Entity EntityFrameworkCore for Framework handling how IImmutableRepository immutable Immutable ImmutableRepository in indicate individual InferConstructor instead interact IReadOnlyEmployeeClassification is link models mutable natively needed NET NHibernate no No non not object objects Objects of on operations Operations option or other overcome pair perform populate properties Prototype read Read ReadOnlyEmployeeClassification Recipes RepoDb repository Repository ServiceStack setting should Since snippet special support supports than that the These this to To TODO ToEntity Tortuga TReadOnlyModel Update use used using with WithConstructor working write You",
      "title": "Immutable CRUD"
    },
    {
      "location": "PopulateDataTable.htm",
      "breadcrumbs": "Home / Populate DataTable",
      "keywords": "a A add Ado ADO also an are area as be before bulk but can Chain chosen classes columns consider Core creating cs custom Dapper data DataTable DataTableResultTransformer displayed does dynamically each EF Entity EntityFrameworkCore for Framework generalize grid holding IDataReader in inconjunction inline insert IPopulateDataTableRepository IResultTransformer is it It library Load may must natively NET NHibernate not Note of often onerous operation or performing Populate PopulateDataTable PopulateDataTableRepository PopulateDataTableRepository2 primarily Prototype provided Recipes reflection RepoDb report Repository results returned ServiceStack snippet some sort SQL staging support supports that the then this to TODO Tortuga used using when with you You",
      "title": "Populate DataTable"
    },
    {
      "location": "ModelWithLookupSimple.htm",
      "breadcrumbs": "Home / Foreign Key to Lookup Table CRUD / Integer-Based Foreign Key",
      "keywords": "1 a Ado ADO an and as Based been case Chain code constructor Core Create CRUD cs Dapper Delete demonstrates EmployeeSimple Entity EntityFrameworkCore FK foreign Foreign Framework has IEmployeeSimple IModelWithLookupSimpleRepository In integer Integer into is key Key lookup model Model ModelWithLookup ModelWithLookupSimpleRepository moved NET NHibernate object on operations Operations order performing population promote Prototype Read Recipes reference RepoDb Repository represented reuse ServiceStack snippet table TEmployee that the The This to TODO Tortuga Update use with",
      "title": "Integer-Based Foreign Key"
    },
    {
      "location": "ModelWithLookupComplex.htm",
      "breadcrumbs": "Home / Foreign Key to Lookup Table CRUD / Object-Based Foreign Key",
      "keywords": "1 a Ado ADO against an and as attribute Based be been by call case Chain child Child clients code com constructor Core could create Create created CRUD cs Dapper data database Database DBContext Decompose Delete demonstrates does e Employee EmployeeComplex EmployeeDetail Entity EntityFrameworkCore exposed FK for foreign Foreign Framework from g get github has HR https IEmployeeComplex IModelWithLookupComplexRepository in In indicate indicates into is its join key Key layer Likewise lookup mapped mapping Mapping model Model ModelWithLookup ModelWithLookupComplexRepository moved multi Multi must need NET NHibernate not object Object objects occur of on operations Operations order OrmCookbookDB otherwise outside overload override parameter parent performing populated population primary promote properties Prototype provides Read Recipes reference RepoDb Repository represented representing REST reuse s safety same second ServiceStack should snippet splitOn sql StackExchange support table TEmployee text that the The This to TODO Tortuga update Update use Use used via view Views was with",
      "title": "Object-Based Foreign Key"
    }
  ]
}