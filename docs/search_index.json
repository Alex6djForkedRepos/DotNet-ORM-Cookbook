{
  "docs": [
    {
      "location": "Introduction.htm",
      "breadcrumbs": "Home / Introduction",
      "keywords": "2016 a A actual added advanced Advanced all along alternate and any appropriate are arranged articles Articles as be best build by can case cases Cases Chain class classes code com compiled concepts contributing Contributions cookbook Cookbook create created criticism Dapper defrancea demonstrate demonstrated design didn documentation Documentation done DotNet each Each ensure Entity expand explanations favorite file folder follow for Framework from fully getting github GitHub given Grauenwolf has http https idea if If illustrate implementation Implementation in In include infoq InfoQ inheriting inline into io is it its keep many markdown matching may mind Models multiple NET notation novices October of on opt or Original ORM ORMs out own pattern Pattern patterns PDF people playing please possible practices Presentation presented prevent Projbook project published recipes relevant Repositories repository Repository rules s samples series set shared So strategies Strategies sync t test tests that the The this This three times to To understanding up use Use used using was website welcome were When which will wishes with without working www xUnit you",
      "title": "Introduction"
    },
    {
      "location": "SingleModelRepositories.htm",
      "breadcrumbs": "Home / Single Model Repositories",
      "keywords": "0 1 2 30 8 a access actually Ado ADO adornment alert All amount and annotations applies are as assembly associate attribute attributes base Based be before below better block boilerplate but call called calls can case Case cases Chain class classification code Code column complex configuration context convenient Core could create Create CRUD cs csharp Dapper data database DbContext DbSet defined Delete demonstrates documentation does doesn done EDMX EmployeeClassification employeeClassificationKey EmployeeClassificationKey employeeClassificationName EmployeeClassificationName EmployeeClassificationRepository EmployeeClassificationRepository_Intermediate EmployeeClassifications encoding end Entity EntityFramework error essentially every example factory file files Finally FindByName first First Flush for Framework from general generate generated generator get GetAll GetByKey has have heavily helper Here hibernate Hibernate However HR id IEmployeeClassification IEmployeeClassificationRepository IList implement implementations implicitly in In includes inefficient info Instead int interesting interface interfaces Intermediate internally invoke is it itself Java just key Key knows leaving literally ll long mapped mapping match mean means methods minimal model Model models Models modifications modify more name names namespace native need needs NET nhibernate NHibernate no normally not of oldest on one operations OrmCookbook ORMs other overridden partial participate pattern patterns primary property Prototype public quite Rather raw really Recipes recommends reduce refers relies Repositories repository Repository requires rule rules runtime s same schema session set shown single Single snippet so some speaking specified SQL Strictly string StringLength strings style such t table Table tag that the The there they this This to To tooling Tortuga unnecessary Update urn use Use used using utf version virtual void was what when will with With Without written xml XML xmlns you",
      "title": "Single Model Repositories"
    },
    {
      "location": "AsynchronousRepositories.htm",
      "breadcrumbs": "Home / Asynchronous Repositories",
      "keywords": "a add Ado ADO allow an and any applications appropriate are as async Async asynchronous Asynchronous await awaitable background based blocking calls case Case Chain changes create CreateAsync creates CRUD cs csharp Dapper Data database DeleteAsync demonstrates Do does EmployeeClassification EmployeeClassificationAsynchronousRepository EmployeeClassificationclassification employeeClassificationKey employeeClassificationName ensure Entity EntityFramework examples Execute ExecuteAsync extension FindByNameAsync for Framework generally GetAllAsync GetByKeyAsync GUI IEmployeeClassificationAsynchronousRepository IList import in In int interface LINQ make methods model Model modification more namespace need needed NET NHibernate No not of on operations our places preferable prevent prototype Prototype public Recipes replaced Repositories repository Repository responsiveness run Run scenario server signatures simply Single slight snippet string support System Task tasks that the The these they This thread throughput to To Tortuga UI UpdateAsync use Use version with you",
      "title": "Asynchronous Repositories"
    },
    {
      "location": "ModelWithSingleChild.htm",
      "breadcrumbs": "Home / Model with Single Child",
      "keywords": "6 a A above ADO alert already also always an and applied are as As attribute be becomes by called came can cannot case Case Chain child Child clause closed column comma compatible consits context Core create Create cs Dapper data decompose Decompose Decomposed defined Deparment Department DepartmentDetail DepartmentWithChildRepository detail different division Division DivisionKey DivsionKey do doing don EF enabled end Entity EntityFramework Entry error every exception expects expose fetch fields Find FK for For foreign Framework from function GetAll GetByKey handle handling happen happens hard has have heavily here how HR IDepartment IDepartment1 IDivision if If implementation important in In Include indicate insert Insert inserts inside Instead interesting interfaces into is isn it It its itself join just Key knows lazy lead Like likely limit limitation list loading logically longform manually mapped Mapping match matching mentioned model Model models Models more most Multi necessary need needed NET new no normal not Nothing null NullReferenceException object objects of on one operations order ORMs other Otherwise parameter parent participate pass performing plus populate populated problem properties property pull purpose read reads Recipes record records refer related relies Repositories repository represented requires result row runtime save saving separated set sets shortcut should Since single Single snippet so splitOn State statement still syntax table TDivision than that the The then these things this This thrown tiggered time to To Tortuga touch try two type underlying Unlike up update Update updates use Use used using value view views virtual vitual we when When which will wish with With Without write you You",
      "title": "Model with Single Child"
    }
  ]
}