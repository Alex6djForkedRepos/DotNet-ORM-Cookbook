{
  "docs": [
    {
      "location": "FAQ.htm",
      "breadcrumbs": "Home / FAQ",
      "keywords": "2nd a abide abstract access Access accomplished achieve actual add adhere all All allowed also an and Another any application Application applies Architecture are around as Asked assists associated based basic be both business by call Can case cases class classes close code concerns connection connections Connections consider Consumers context conventions cookbook Core create Creating currently custom DAL data Data database databases DBContext design designing details developer development dictate different Different do does doesn don DTOs early Edition EmployeeClassification encapsulate Encapsulate entire entities etc example excessive exist expose favorite following for For Frequently fulfill function functionality fundamental general Generally generating given goals Guide guidelines have headers helper hide higher hold how I if If in In include inject intention interact interface interfaces internal involved IQueryable is ISession it It just knowledge late layer Layer level logic long maintenance managed managing mapping maximize may mean meaning Microsoft my necessarily need NET Never no not null objects of once open or order ORM ORMs other our part passed pattern perform performance periods permitted phase planning possible project queries Questions reason record repositories repository Repository requirement resources responsible returns security Separating Server should so solutions something source sources speaking specific SQL storage structures such support t tasked techniques technologies term test that That the The them this This through to To TypedDataSets use used uses using utility valuable want wants way we What when Why will willing with within work XML Yes you",
      "title": "FAQ"
    },
    {
      "location": "SingleModelCrud.htm",
      "breadcrumbs": "Home / Single Model CRUD",
      "keywords": "1 15 2003 2019 30 6 a A abstract Action actually Adapter Ado ADO adornment alert all All also amount an and annotations API applies are as As aspx associate at attribute attributes base Based basic be before below better block boilerplate both Build but by call called calling calls can cannot case cases Chain class code Code column Column commercial complex configuration ConfigureSessionFactory context convenient cookbook core Core could covers create Create created CRUD cs csharp Dapper database date DbContext DbSet delete Delete Depending derive design designer development does doesn done each EDMX ef efcore either eliminates Embedded EmployeeClassification EmployeeClassificationKey EmployeeClassificationName EmployeeClassifications EmployeeClassificationSingleModelCrud end entities Entities entity Entity EntityFrameworkCore entityframeworktutorial error essentially every example existing extra extraneous far file files Finally first First fluent Flush for For Framework from full further general generate generated get has have hbm heavily helper Here Hibernate how However HR https hybrid illustrate implementations implicitly Improved in In includes info information Instead int interesting interfaces internally invoke is ISingleModelCrudRepository it It its itself Java just key Key keys latest leaving less level like Linq literally ll LLBLGen LLBLGenPro long looks low major mapping mappings Mappings market match mean means metadata methods micro minimal mix model Model models modifications more multiple name names need needed needs net NET NHibernate no non normally not October of offers often oldest on one operation operations or ORM OrmCookbook ORMs other Other over overridden paradigms partial participate per performing plain poco primary Pro property Prototype public query QuerySpec Rather raw read Read really recipes Recipes recommended reduce refers released releases relies RepoDb repositories repository Repository represents requires resembles resemebles resource revised row rule rules runtime s same see seen SelfServicing ServiceStack SessionFactory set setup Setup shown since single Single SingleModelCrud SingleModelCrudRepository SingleModelCrudRepository2 snippet so some speaking specific specified SQL SQLs standard stitch Strictly string StringLength strings style such supports systems t table Table tag TEmployeeClassification that the The there There these These they this This to To together tooling Tortuga two update Update usage use used using v5 various version virtual was well what when When which will with With Without written www xml XML you",
      "title": "Single Model CRUD"
    },
    {
      "location": "ModelWithChildren.htm",
      "breadcrumbs": "Home / Model with Childern CRUD",
      "keywords": "1 2 a access active ADO agnostic all alone Alternately alternative an and application are aren around as at available based be between block by By can cascade Cascade cascading case Chain child Child class clean collection constraint control Core correctly Create CRUD cs Dapper data database DBContext default delete Delete DeleteBehavior deleted deletes demonstrates desired direct does due each easy empty ensure entities Entity EntityFrameworkCore EntityState even explicitly find for For foreign Framework functionality go have ignore IModelWithChildrenRepository implemented in includes insert IProduct IProductLine is ISession isn it key layer lazy level list LLBLGen LLBLGenPro loading longer management method missing Model ModelWithChildren ModelWithChildrenRepository needed Nested NET NHibernate no not object objects of on OnDelete one operating operation operations Operations or order ORM orphan Otherwise parent partial pass performing predicate Pro property Prototype Read Recipes record records Records regular removal removed RepoDb Repository requires rest rows separate separately separation ServiceStack set setting setup snippet stand straightforward support supported table that the The this This to TODO Tortuga TProduct TProductLine tracker tracks transaction trigger two Unit up update Update UpdateAlt use using utilize utilizing variants way we when When whether which will with With work Work works you",
      "title": "Model with Childern CRUD"
    },
    {
      "location": "SingleModelCrudAsync.htm",
      "breadcrumbs": "Home / Async Operations",
      "keywords": "1 a add adds Ado ADO and another any appropriate are arrays As async Async attempt await be becomes between but But can cancel cancellable cancellation case cases Chain changes CommandDefinition completing condition ConfigureAwait Core create CRUD cs Dapper database done Entity EntityFrameworkCore example exceptions explicitly false for For Framework full future general GetByKey GetByKeyAsync handled Here htm if If in including is ISingleModelCrudAsyncRepository it LLBLGen LLBLGenPro loading may Model must need NET NHibernate non not object of only open operation operations or Original Otherwise parameter parameters places Pro Prototype provided query race read reason Recipes record records RepoDb repository Repository required rule safely ServiceStack set Single SingleModelCrud SingleModelCrudAsync SingleModelCrudAsyncRepository SingleModelCrudRepository snippet support TEmployeeClassification that the The then There they think this This to token tokens Tortuga transactions try use user users which will wish with With wrap write you your",
      "title": "Async Operations"
    },
    {
      "location": "TryCrud.htm",
      "breadcrumbs": "Home / TryGet/Update/Delete Operations",
      "keywords": "1 a Ado ADO an and as back between cases catch Chain command Core counts cs Dapper Delete demonstrate difference Entity EntityFrameworkCore exception Execute ExecuteNonQuery fail Framework from In is ITryCrudRepository Like LLBLGen LLBLGenPro methods need NET NHibernate no operations Operations or Pro Prototype read Recipes RepoDb Repository returned row ServiceStack silently snippet some StaleStateException TEmployeeClassification that the The there These this to Tortuga trick TryCrud TryCrudRepository TryDelete TryGet TryUpdate Update use uses with you",
      "title": "TryGet/Update/Delete Operations"
    },
    {
      "location": "PartialUpdate.htm",
      "breadcrumbs": "Home / Partial Updates",
      "keywords": "1 2 a above Ado ADO and are be below can cases Chain class ClassMappedNameCache Code column columns Core cs Dapper decide demonstrate directly do dynamic e either entity Entity EntityFrameworkCore extract fetch fetching filter first following for Framework from g have help how in In IPartialUpdateRepository it item key Limit LLBLGen LLBLGenPro model modify name NET NHibernate object of on one or original parameter partial Partial PartialUpdate PartialUpdateRepository pass passed perform primary Pro properties Prototype Recipes record RepoDb Repository resembles row s separate ServiceStack snippet snippets Specify table targe target targetted the The then These to To Tortuga unpacked update Updated updates Updates UpdateWithObject UpdateWithSeparateParameters use will without you your",
      "title": "Partial Updates"
    },
    {
      "location": "Immutable.htm",
      "breadcrumbs": "Home / Immutable CRUD",
      "keywords": "1 a action ADO after an An and are as be before Below between but by call can cases Chain changes class constructor Constructor conversion conversions cookbook Core Create CRUD cs Dapper data default Delete deleted demonstrate directly does doesn e either EmployeeClassification EmployeeClassificationEntity entities Entities entity Entity EntityFrameworkCore fetched focus for Framework g handling have how however IImmutableRepository immutable Immutable ImmutableRepository in indicate individual InferConstructor inserted instead interact IReadOnlyEmployeeClassification is it link LLBLGen LLBLGenPro make manage marked memory models mutable MutableEmployeeClassification natively needed NET NHibernate no No non not object objects Objects of on only operations Operations option or order other overcome pair perform populate Pro properties Prototype read Read ReadOnlyEmployeeClassification recipes Recipes RepoDb repository Repository sample scope ServiceStack setting should Since snippet special specifications support supports than that the The these These this to To TODO ToEntity Tortuga TReadOnlyModel Update updated use used using with WithConstructor work working write You",
      "title": "Immutable CRUD"
    },
    {
      "location": "Joins.htm",
      "breadcrumbs": "Home / Projecting with a Join",
      "keywords": "2 a Ado ADO and as Based be but cases Chain Child Core CRUD cs Dapper database define demonstrate doesn EF EmployeeDetail Entity EntityFrameworkCore examples explicitly fallback for For Foreign Framework has hbm how htm IJoinsRepository into join Join joins Joins JoinsRepository Key LLBLGen mapped Mappings may Model ModelWithChildren ModelWithLookupComplex Multiple native natively need NET NHibernate not object Object objects of on Operations or other performing Pro project Projecting projections Prototype purpose raw Recipes Records RepoDb Repository reults See ServiceStack simple snippet so SQL support supports TEmployeeDetail TEmployeeSimple the these These to TODO Tortuga use used view with xml",
      "title": "Projecting with a Join"
    },
    {
      "location": "Views.htm",
      "breadcrumbs": "Home / Reading from Views",
      "keywords": "0 2 3 a additional Ado ADO also are as be but by capability case cases Chain column configuration configured Core cs Dapper Database databases demonstrate EF EmployeeDetail entity Entity EntityFrameworkCore false Framework from HasNoKey hbm how HR ID in In is IViewsRepository like LLBLGen Mappings modelBuilder must mutable name NET NHibernate Note of OrmCookbookDB outside Pro Prototype read Reading Recipes RepoDb Repository require requirements schema scope ServiceStack snippet some sql Starting supported tables TEmployeeDetail TEmployeeSimple text that the These They this to TODO Tortuga ToView treated two unique use view views Views ViewsRepository While with writing xml",
      "title": "Reading from Views"
    },
    {
      "location": "Sorting.htm",
      "breadcrumbs": "Home / Basic Sorting",
      "keywords": "1 a A Ado ADO against are as at attacks basic Basic be but by case cases Chain checked chosed columns Columns Core cs Dapper demonstrate dynamically Entity EntityFrameworkCore expressions for Framework handled how in injection is ISortingRepository list LLBLGen needed NET NHibernate Note object of or passed perform prevent Pro Prototype Recipes RepoDb Repository reverse runtime separate ServiceStack snippet sorted SortExpression sorting Sorting SortingRepository sorts SQL strings TEmployee the These to TODO Tortuga use will",
      "title": "Basic Sorting"
    },
    {
      "location": "PopulateDataTable.htm",
      "breadcrumbs": "Home / Populate DataTable",
      "keywords": "a A add Ado ADO also an are area as be before bulk but can Chain chosen classes columns consider Core creating cs custom Dapper data DataTable DataTableResultTransformer displayed does dynamically each EF Entity EntityFrameworkCore ExecuteReader for Framework from generalize grid holding IDataReader in In inconjunction inline insert IPopulateDataTableRepository IResultTransformer is it It library LLBLGen LLBLGenPro Load may method must natively NET NHibernate not Note object of often onerous operation or performing Populate PopulateDataTable PopulateDataTableRepository PopulateDataTableRepository2 primarily Pro Prototype provided Recipes reflection RepoDb report Repository results returned ServiceStack snippet some sort SQL staging support supports that the then this to TODO Tortuga used using when with you You",
      "title": "Populate DataTable"
    },
    {
      "location": "ModelWithLookupSimple.htm",
      "breadcrumbs": "Home / Foreign Key to Lookup Table CRUD / Integer-Based Foreign Key",
      "keywords": "1 a Ado ADO an and as Based been case Chain code constructor Core Create CRUD cs Dapper Delete demonstrates EmployeeSimple Entity EntityFrameworkCore FK foreign Foreign Framework has IEmployeeSimple IModelWithLookupSimpleRepository In integer Integer into is key Key LLBLGen LLBLGenPro lookup model Model ModelWithLookup ModelWithLookupSimpleRepository moved NET NHibernate object on operations Operations order performing population Pro promote Prototype Read Recipes reference RepoDb Repository represented reuse ServiceStack snippet table TEmployee that the The This to TODO Tortuga Update use with",
      "title": "Integer-Based Foreign Key"
    },
    {
      "location": "ModelWithLookupComplex.htm",
      "breadcrumbs": "Home / Foreign Key to Lookup Table CRUD / Object-Based Foreign Key",
      "keywords": "1 a account Ado ADO against all also always an and are aren as As attribute base Based be been by call can case cater Chain change child Child children class classes clients code com constructor Core could create Create created CRUD cs Dapper data database Database DBContext Decompose default Delete demonstrates derived disabled does doesn e Employee EmployeeComplex EmployeeDetail entities Entities entity Entity EntityFrameworkCore ExecuteQueryMultiple executing exposed fetching FK for foreign Foreign Framework from g get github graph has have here HR https IEmployeeComplex illustrates IModelWithLookupComplexRepository in In indicate indicates into is it its join key Key known layer Likewise LLBLGen LLBLGenPro lookup make mapped mapping Mapping mikependon model Model ModelWithLookup ModelWithLookupComplexRepository more moved much multi Multi multiple Multiple must need NET NHibernate not object Object objects occur of on only operations Operations optimal order OrmCookbookDB otherwise outside overload override parameter parent passed performing persisted persists populated population primary Pro promote properties Prototype provides QueryMultiple reachable Read Recipes recursive reference refetch related RepoDb repository Repository represented representing REST Resultsets reuse s safety same saves second ServiceStack should snippet so solution splitOn sql StackExchange statements support supports sure table taken TEmployee text that the The this This to TODO Tortuga tracking traversing types update Update updated use Use used user via view Views was when which wiki with",
      "title": "Object-Based Foreign Key"
    }
  ]
}