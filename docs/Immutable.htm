<!DOCTYPE html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Immutable CRUD - The .NET Core ORM Cookbook</title>
    <link rel="shortcut icon" href="favicon.ico">
    <link rel="stylesheet" href="css/theme.css" type="text/css" />
    <link rel="stylesheet" href="css/theme_colors.css" type="text/css" />
    <link rel="stylesheet" href="css/styles/vs.css">
    <link rel="stylesheet" href="css/font-awesome.4.5.0.min.css">
</head>
<body role="document">
    <div class="grid-for-nav">
        <nav data-toggle="nav-shift" class="nav-side stickynav">
            <div class="side-nav-search">
                <a href="index.htm"><i class="fa fa-home"></i> The .NET Core ORM Cookbook</a>
                <div role="search">
                    <form id="search-form" class="form" action="Docnet_search.htm" method="get">
                        <input type="text" name="q" placeholder="Search docs" />
                    </form>
                </div>
            </div>
            <div class="menu menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
<ul>
<li class="tocentry"><a href="index.htm">Home</a>
</li>

<li class="tocentry"><a href="SingleModelCrud.htm">Single Model CRUD</a>
</li>
<li class="tocentry"><a href="SingleModelCrudAsync.htm">Async Operations</a>
</li>
<li class="tocentry"><a href="TryCrud.htm">TryGet/Update/Delete Operations</a>
</li>
<li class="tocentry"><a href="PartialUpdate.htm">Partial Updates</a>
</li>
<li class="tocentry current"><a class="current" href="Immutable.htm">Immutable CRUD</a>
<ul class="currentrelative">
<li class="tocentry"><a href="#prototype-repository">Prototype Repository</a></li>

<li class="tocentry"><a href="#ado.net">ADO.NET</a></li>

<li class="tocentry"><a href="#chain">Chain</a></li>

<li class="tocentry"><a href="#dapper">Dapper</a></li>

<li class="tocentry"><a href="#entity-framework-core">Entity Framework Core</a></li>

<li class="tocentry"><a href="#nhibernate">NHibernate</a></li>

<li class="tocentry"><a href="#repodb">RepoDb</a></li>

<li class="tocentry"><a href="#servicestack">ServiceStack</a></li>



</ul>
</ul>
				<div class="toc-footer">
					<span class="text-small">
						<hr/>
						<a href="https://github.com/FransBouma/DocNet" target="_blank">Made with <i class="fa fa-github"></i> DocNet</a>
					</span>
				</div>	
			</div>
            &nbsp;
        </nav>
        <section data-toggle="nav-shift" class="nav-content-wrap">
            <nav class="nav-top" role="navigation" aria-label="top navigation">
                <i data-toggle="nav-top" class="fa fa-bars"></i>
                <a href="index.htm">The .NET Core ORM Cookbook</a>
            </nav>
            <div class="nav-content">
                <div role="navigation" aria-label="breadcrumbs navigation">
                    <div class="breadcrumbs">
<ul><li><a href="index.htm">Home</a></li> / <li><a href="Immutable.htm">Immutable CRUD</a></li></ul>
					
                    </div>
                    <hr />
                </div>
                <div role="main">
                    <div class="section">
<h1 id="crud-operations-on-immutable-objects">CRUD Operations on Immutable Objects<a class="headerlink" href="#crud-operations-on-immutable-objects" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h1>
<p>These use cases demonstrate how to perform Create, Read, Update, and Delete operations on immutable objects. </p>
<h2 id="prototype-repository">Prototype Repository<a class="headerlink" href="#prototype-repository" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<pre><code class="cs">public interface IImmutableRepository&lt;TReadOnlyModel&gt;
   where TReadOnlyModel : class, IReadOnlyEmployeeClassification
{
    /// &lt;summary&gt;
    /// Gets an EmployeeClassification row by its primary key.
    /// &lt;/summary&gt;
    /// &lt;remarks&gt;Behavior when row doesn't exist is not defined.&lt;/remarks&gt;
    TReadOnlyModel? GetByKey(int employeeClassificationKey);

    /// &lt;summary&gt;
    /// Gets all EmployeeClassification rows.
    /// &lt;/summary&gt;
    IReadOnlyList&lt;TReadOnlyModel&gt; GetAll();

    /// &lt;summary&gt;
    /// Gets an EmployeeClassification row by its name. Assume the name is unique.
    /// &lt;/summary&gt;
    /// &lt;remarks&gt;Must return a null if when row doesn't exist.&lt;/remarks&gt;
    TReadOnlyModel? FindByName(string employeeClassificationName);

    /// &lt;summary&gt;
    /// Create a new EmployeeClassification row, returning the new primary key.
    /// &lt;/summary&gt;
    int Create(TReadOnlyModel classification);

    /// &lt;summary&gt;
    /// Update a EmployeeClassification row.
    /// &lt;/summary&gt;
    /// &lt;remarks&gt;Behavior when row doesn't exist is not defined.&lt;/remarks&gt;
    void Update(TReadOnlyModel classification);

    /// &lt;summary&gt;
    /// Delete a EmployeeClassification row using an object.
    /// &lt;/summary&gt;
    /// &lt;remarks&gt;Behavior when row doesn't exist is not defined.&lt;/remarks&gt;
    void Delete(TReadOnlyModel classification);
}
</code></pre>

<h2 id="ado.net">ADO.NET<a class="headerlink" href="#ado.net" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Since ADO doesn't directly interact with models, no changes are needed for immutable objects other than to call a constructor instead of setting individual properties.</p>
<p>TODO</p>
<h2 id="chain">Chain<a class="headerlink" href="#chain" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>Chain natively supports working with immutable objects, conversions are needed.</p>
<p>To populate immutable objects, use either the <code>InferConstructor</code> option or a <code>.WithConstructor&lt;...&gt;</code> link to indicate that a non-default constructor should be used.</p>
<pre><code class="cs">public class ImmutableRepository : IImmutableRepository&lt;ReadOnlyEmployeeClassification&gt;
{
    const string TableName = &quot;HR.EmployeeClassification&quot;;
    readonly SqlServerDataSource m_DataSource;

    public ImmutableRepository(SqlServerDataSource dataSource)
    {
        m_DataSource = dataSource;
    }

    public int Create(ReadOnlyEmployeeClassification classification)
    {
        if (classification == null)
            throw new ArgumentNullException(nameof(classification), $&quot;{nameof(classification)} is null.&quot;);

        return m_DataSource.Insert(classification).ToInt32().Execute();
    }

    public void Delete(ReadOnlyEmployeeClassification classification)
    {
        if (classification == null)
            throw new ArgumentNullException(nameof(classification), $&quot;{nameof(classification)} is null.&quot;);

        m_DataSource.Delete(classification).ToInt32().Execute();
    }

    public ReadOnlyEmployeeClassification? FindByName(string employeeClassificationName)
    {
        return m_DataSource.From(TableName, new { employeeClassificationName }).ToObject&lt;ReadOnlyEmployeeClassification&gt;(RowOptions.InferConstructor | RowOptions.AllowEmptyResults).Execute();
    }

    public IReadOnlyList&lt;ReadOnlyEmployeeClassification&gt; GetAll()
    {
        return m_DataSource.From(TableName).ToImmutableArray&lt;ReadOnlyEmployeeClassification&gt;(CollectionOptions.InferConstructor).Execute();
    }

    public ReadOnlyEmployeeClassification? GetByKey(int employeeClassificationKey)
    {
        return m_DataSource.GetByKey(TableName, employeeClassificationKey).ToObject&lt;ReadOnlyEmployeeClassification&gt;(RowOptions.InferConstructor).NeverNull().Execute();
    }

    public void Update(ReadOnlyEmployeeClassification classification)
    {
        if (classification == null)
            throw new ArgumentNullException(nameof(classification), $&quot;{nameof(classification)} is null.&quot;);

        m_DataSource.Update(classification).Execute();
    }
}
</code></pre>

<h2 id="dapper">Dapper<a class="headerlink" href="#dapper" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>TODO</p>
<h2 id="entity-framework-core">Entity Framework Core<a class="headerlink" href="#entity-framework-core" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>TODO</p>
<h2 id="nhibernate">NHibernate<a class="headerlink" href="#nhibernate" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>NHibernate does not directly support immutable objects. You can overcome this by using a pair of conversions between the immutable object and the mutable entity.</p>
<pre><code class="cs">public ReadOnlyEmployeeClassification(EmployeeClassification entity)
{
    if (entity == null)
        throw new ArgumentNullException(nameof(entity), $&quot;{nameof(entity)} is null.&quot;);
    if (entity.EmployeeClassificationName == null)
        throw new ArgumentNullException(nameof(entity), $&quot;{nameof(entity.EmployeeClassificationName)} is null.&quot;);

    EmployeeClassificationKey = entity.EmployeeClassificationKey;
    EmployeeClassificationName = entity.EmployeeClassificationName;
    IsExempt = entity.IsExempt;
    IsEmployee = entity.IsEmployee;
}
</code></pre>

<pre><code class="cs">public EmployeeClassification ToEntity()
{
    return new EmployeeClassification()
    {
        EmployeeClassificationKey = EmployeeClassificationKey,
        EmployeeClassificationName = EmployeeClassificationName,
        IsExempt = IsExempt,
        IsEmployee = IsEmployee
    };
}
</code></pre>

<p>These conversions are used in the repository before write operations and after read operations.</p>
<pre><code class="cs">public class ImmutableRepository : IImmutableRepository&lt;ReadOnlyEmployeeClassification&gt;
{
    readonly ISessionFactory m_SessionFactory;

    public ImmutableRepository(ISessionFactory sessionFactory)
    {
        m_SessionFactory = sessionFactory;
    }

    public int Create(ReadOnlyEmployeeClassification classification)
    {
        if (classification == null)
            throw new ArgumentNullException(nameof(classification), $&quot;{nameof(classification)} is null.&quot;);

        using (var session = m_SessionFactory.OpenSession())
        {
            var temp = classification.ToEntity();
            session.Save(temp);
            session.Flush();
            return temp.EmployeeClassificationKey;
        }
    }

    public void Delete(ReadOnlyEmployeeClassification classification)
    {
        if (classification == null)
            throw new ArgumentNullException(nameof(classification), $&quot;{nameof(classification)} is null.&quot;);

        using (var session = m_SessionFactory.OpenSession())
        {
            session.Delete(classification.ToEntity());
            session.Flush();
        }
    }

    public ReadOnlyEmployeeClassification? FindByName(string employeeClassificationName)
    {
        using (var session = m_SessionFactory.OpenStatelessSession())
        {
            return session
                .CreateCriteria(typeof(EmployeeClassification))
                .Add(Restrictions.Eq(&quot;EmployeeClassificationName&quot;, employeeClassificationName))
                .List&lt;EmployeeClassification&gt;()
                .Select(x =&gt; new ReadOnlyEmployeeClassification(x))
                .SingleOrDefault();
        }
    }

    public IReadOnlyList&lt;ReadOnlyEmployeeClassification&gt; GetAll()
    {
        using (var session = m_SessionFactory.OpenStatelessSession())
        {
            return session
                .CreateCriteria(typeof(EmployeeClassification))
                .List&lt;EmployeeClassification&gt;()
                .Select(x =&gt; new ReadOnlyEmployeeClassification(x))
                .ToImmutableArray();
        }
    }

    public ReadOnlyEmployeeClassification? GetByKey(int employeeClassificationKey)
    {
        using (var session = m_SessionFactory.OpenStatelessSession())
        {
            var result = session.Get&lt;EmployeeClassification&gt;(employeeClassificationKey);
            return new ReadOnlyEmployeeClassification(result);
        }
    }

    public void Update(ReadOnlyEmployeeClassification classification)
    {
        if (classification == null)
            throw new ArgumentNullException(nameof(classification), $&quot;{nameof(classification)} is null.&quot;);

        using (var session = m_SessionFactory.OpenSession())
        {
            session.Update(classification.ToEntity());
            session.Flush();

            //var temp = session.Get&lt;EmployeeClassification&gt;(classification.EmployeeClassificationKey);
            //if (temp != null)
            //{
            //    temp.EmployeeClassificationName = classification.EmployeeClassificationName;
            //    temp.IsExempt = classification.IsExempt;
            //    temp.IsEmployee = classification.IsEmployee;
            //    session.Update(temp);
            //    session.Flush();
            //}
        }
    }
}
</code></pre>

<h2 id="repodb">RepoDb<a class="headerlink" href="#repodb" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>TODO</p>
<h2 id="servicestack">ServiceStack<a class="headerlink" href="#servicestack" title="Permalink to this headline"><i class="fa fa-link" aria-hidden="true"></i></a></h2>
<p>TODO</p>

                    </div>
                </div>
                <footer>
                    <hr />
                    <div role="contentinfo">
The ORM Cookbook. <a href='https://github.com/Grauenwolf/DotNet-ORM-Cookbook' target='_blank'>Visit us at GitHub</a>.
                    </div>
                </footer>
            </div>
        </section>
    </div>
    <script src="js/jquery-2.1.1.min.js"></script>
    <script src="js/modernizr-2.8.3.min.js"></script>
    <script src="js/highlight.pack.js"></script>
    <script src="js/theme.js"></script>

</body>
</html>
