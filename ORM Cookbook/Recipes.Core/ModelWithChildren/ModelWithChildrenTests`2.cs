using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Linq;

namespace Recipes.ModelWithChildren
{
    /// <summary>
    /// This use case performs basic CRUD operations on a model that contains a collection of child objects.
    /// Implements the <see cref="Recipes.TestBase" />
    /// </summary>
    [TestCategory("ModelWithChildren")]
    public abstract class ModelWithChildrenTests<TProductLine, TProduct> : TestBase
       where TProductLine : class, IProductLine<TProduct>, new()
       where TProduct : class, IProduct, new()
    {
        protected abstract IModelWithChildrenRepository<TProductLine, TProduct> GetRepository();

        const string Alpha = "ABCDEFG";

        /// <summary>
        /// Create and read back an object graph.
        /// </summary>
        [TestMethod]
        public void CreateAndReadBack()
        {
            var repository = GetRepository();

            TProductLine line = CreateProductLine();

            var newKey = repository.Create(line);
            Assert.IsTrue(newKey >= 1000, "ProductLineKey under 1000 was not generated by the database");

            {
                //Simple read
                var echo = repository.GetByKey(newKey, false);
                Assert.IsNotNull(echo);
                Assert.AreEqual(newKey, echo!.ProductLineKey);
                Assert.AreEqual(line.ProductLineName, echo.ProductLineName);
                Assert.IsTrue(echo.Products == null || echo.Products.Count == 0, "Child records were not requested");
            }

            {
                //Read with children
                var echo = repository.GetByKey(newKey, true);
                CompareLineAndProducts(newKey, line, echo!);
            }
        }

        static void CompareLineAndProducts(int newKey, TProductLine line, TProductLine echo)
        {
            Assert.IsNotNull(echo);
            Assert.AreEqual(newKey, echo!.ProductLineKey);
            Assert.AreEqual(line.ProductLineName, echo.ProductLineName);
            Assert.AreEqual(line.Products.Count, echo.Products.Count);

            foreach (var original in line.Products)
            {
                var copy = echo.Products.SingleOrDefault(x => x.ProductName == original.ProductName);
                Assert.IsNotNull(copy, "Child record not found");
                Assert.IsTrue(copy!.ProductKey >= 1000, "ProductKey under 1000 was not generated by the database");
                Assert.AreEqual(original.ProductWeight, copy.ProductWeight);
                Assert.AreEqual(original.ShippingWeight, copy.ShippingWeight);
            }
        }

        private static TProductLine CreateProductLine(string? nameOverride = null)
        {
            var line = new TProductLine()
            {
                ProductLineName = nameOverride ?? "Test " + DateTime.Now.Ticks
            };
            for (var i = 0; i < 5; i++)
            {
                var product = new TProduct()
                {
                    ProductName = "Part " + Alpha[i],
                    ProductWeight = 123 + (i * .45M),
                    ShippingWeight = 125 + (i * .45M)
                };
                line.Products.Add(product);
            }

            return line;
        }

        /// <summary>
        /// Create and read back an object graph.
        /// </summary>
        [TestMethod]
        public void CreateAndFindByName()
        {
            var repository = GetRepository();

            //TODO
        }

        /// <summary>
        /// Create and delete an object graph.
        /// </summary>
        [TestMethod]
        public void CreateAndDelete()
        {
            var repository = GetRepository();

            TProductLine line = CreateProductLine();

            var newKey = repository.Create(line);
            Assert.IsTrue(newKey >= 1000, "ProductLineKey under 1000 was not generated by the database");

            //Read with children
            var echo = repository.GetByKey(newKey, true);
            CompareLineAndProducts(newKey, line, echo!);

            repository.Delete(echo!);

            var check = repository.GetByKey(newKey, true);
            Assert.IsNull(check, "Record should have been deleted");
        }

        /// <summary>
        /// Create and delete an object graph.
        /// </summary>
        [TestMethod]
        public void CreateAndDeleteByKey()
        {
            var repository = GetRepository();

            TProductLine line = CreateProductLine();

            var newKey = repository.Create(line);
            Assert.IsTrue(newKey >= 1000, "ProductLineKey under 1000 was not generated by the database");

            //Read with children
            var echo = repository.GetByKey(newKey, true);
            CompareLineAndProducts(newKey, line, echo!);

            repository.DeleteByKey(newKey);

            var check = repository.GetByKey(newKey, true);
            Assert.IsNull(check, "Record should have been deleted");
        }

        /// <summary>
        /// Create and update an object graph.
        /// </summary>
        [TestMethod]
        public void CreateAndUpdate()
        {
            var repository = GetRepository();

            //TODO
        }

        [TestMethod]
        public void CreateAndAddChild()
        {
            var repository = GetRepository();

            //TODO
        }

        [TestMethod]
        public void CreateAndDeleteChild()
        {
            var repository = GetRepository();

            //TODO
        }

        [TestMethod]
        public void CreateAndUpdateChild()
        {
            var repository = GetRepository();

            //TODO
        }

        /// <summary>
        /// Create and update a row.
        /// </summary>
        [TestMethod]
        public void CreateAndUpdateChildSeparately()
        {
            var repository = GetRepository();

            //TODO
        }
    }
}
